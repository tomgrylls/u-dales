{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"uDALES Docs \u00b6 This is the documentation for the uDALES (urban Dutch Atmospheric Large Eddy Simulation) model. It contains user's guides and general reference documentation. If you are new to uDALES, please follow our getting started guide first.","title":"Home"},{"location":"#udales-docs","text":"This is the documentation for the uDALES (urban Dutch Atmospheric Large Eddy Simulation) model. It contains user's guides and general reference documentation. If you are new to uDALES, please follow our getting started guide first.","title":"uDALES Docs"},{"location":"udales-docs-software/","text":"project: uDALES author: The uDALES Team project_github: https://github.com/uDALES/u-dales summary: TODO: github: https://github.com/uDALES src_dir: ../src output_dir: ../build/html/udales-docs-software media_dir: assets docmark: ! predocmark: !! docmark_alt: $$$ display: public private protected source: true graph: true coloured_edges: true preprocess: false print_creation_date: true creation_date: %Y-%m-%d %H:%M %z md_extensions: markdown.extensions.toc markdown.extensions.smarty print_creation_date: true","title":"Udales docs software"},{"location":"udales-example-simulations/","text":"Example simulations \u00b6 uDALES simulates a large variety of urban case studies. Here we showcase a few examples ( List of examples ) with different atmospheric stabilities and various setups (overview in Table 1 ) to help you get started. The setups are in the namoptions file of your simulation. Note that we limited the simulation time to just a few minutes for demonstration, if you are looking to conduct realistic simulations, you need a much longer simulation time. If you wish to run all examples automatically and plot inputs and outputs as shown in this guide, follow the instructions detailed in the development notes instead. Prerequisites \u00b6 All examples below assume that you have installed uDALES as per our getting started guide . Set up the paths and variables for running the simulation, for example with the following: # We assume you are running the following commands from your # top-level project directory. export DA_TOOLSDIR = $( pwd ) /u-dales/tools # Directory of scripts export DA_BUILD = $( pwd ) /u-dales/build/release/u-dales # Build file export NCPU = 2 # Number of CPUs to use for a simulation export DA_WORKDIR = $( pwd ) /outputs # Output top-level directory Run \u00b6 Example cases are located under u-dales/examples . All examples are run using the following command: # We assume you are running the following commands from your # top-level project directory. # General syntax: local_execute.sh exp_directory ./u-dales/tools/local_execute.sh u-dales/examples/001 Customising simulations \u00b6 If you want to make any changes to the example simulations, e.g. changing the domain size, follow the set-up steps in the getting started guide to obtain a copy of the simulation setup and make the changes to your copy of the setup. You may need to run some pre-processing steps (see Pre-processing ) before running the simulation. These cases are indicated as such in Table 1 . Main simulation set-up options \u00b6 Below is a list of common setups and options for urban case studies. A complete list of all options available with uDALES can be found in the Configuration document. Table 1: Main setups of urban case studies and reference example simulation(s). Type Setting Requires pre-processing Example simulation Domain size and resolution yes all Domain equidistant grid yes 001, 002, 101, 102, 501, 502 Domain stretched z-grid yes 201 Domain warmstart no 102 Morphology no buildings yes 001 Morphology infinite canyon builings yes 101 Morphology aligned cuboid buildings yes 002, 501 Morphology staggered cuboid buildings yes 102 Morphology pre-defined buildings yes 201 Morphology LIDAR-image buildings yes 502 Forcing pressure gradient yes 001 Forcing volume flow rate no 101, 102, 501 Forcing outflow rate no -- Forcing free stream velocity no -- Forcing Coriolis and nudging yes 201 Forcing driving data no 502 Lateral momentum boundary conditions (BCs) periodic no 001, 002, 101, 102, 201, 501 Lateral momentum BCs driving data no 502 Passive scalar source point source no 102 Passive scalar source line source no 101 Passive scalar source source network no -- Lateral scalar BCs periodic no 101, 501 Lateral scalar BCs inflow-outflow no 102 Surface and top scalar BCs zero flux no -- Surface and top scalar BCs constant flux no 102 Surface and top scalar BCs isothermal no 101, 501 Surface and top scalar BCs energy balance yes 201 Output instantaneous fields no 001, 101, 102, 201, 502 Output time-averaged fields no 201, 502 Output space-averaged (along y) fields no 101 Output space-averaged (along x,y) profiles no 002, 102, 201, 501, 502 List of examples \u00b6 Standard simulation setup Neutral simulations 001 No buildings, bottom surface roughness Constant pressure gradient Output: instantaneous fields 002 Aligned cuboid buildings Output: space-time averaged profiles Non-neutral simulations 101 Infinite canyon buildings Output: space-averaged along y Volume flow rate forcing in x Temperature Isothermal BC for temperature Passive scalars line source Output: instantaneous fields for temperature and scalars 102 Prerequisites for warmstart simulation Staggered cuboid buildings Volume flow rate forcing in x and y Constant thermal flux BC for temperature Passive scalars point source Scalar inflow-outflow BC Warmstart Coldstart Energy balance simulation 201 Pre-defined buildings Grid-stretching in z Output: time averaged fields Energy Balance Moisture Coriolis forcing and nudging Driver simulation 501 Driver/precursor simulation 502 Prerequisites simulation with external forcing Buildings from LIDAR image Driven simulation Standard simulation setup \u00b6 The below setups are required for any type of simulation. The simulation domain varies amongst the example simulations and is set-up for example by & DOMAIN imax = 64 jtot = 64 kmax = 64 xsize = 64 ysize = 64 & INPS zsize = 64 We also set an initial profile for u-wind velocity (and other variables if they are used) of e.g. u = 2 m/s by & INPS u0 = 2. and add some random perturbations to the initial field, such that turbulence develops faster: randu = 0.01 Changes in the domain and initial profiles require pre-processing. Further, we recommend running the simulations with adaptive time-stepping, the Fast-Fourier-Transformation algorithm in the poisson solver ( this will become default in the future ) and using the Vreman sub-grid model: & RUN ladaptive = . true . & DYNAMICS ipoiss = 0 & NAMSUBGRID lvreman = . true . Further information on these parameters is in the Namoptions overview , and more on the required pre-processing steps is found in Pre-processing . Neutral simulations \u00b6 001 \u00b6 No buildings, bottom surface roughness \u00b6 This simulation does not contain any buildings. Therefore we need to set: & INPS lflat = . true . & WALLS nfcts = 0 A rough surface at the bottom is simulated by setting the following parameters: & BC wtsurf = 0. wqsurf = 0. thls = 28 8. z0 = 0.01 z0h = 0.000067 where z0 is the roughness length for momentum. Note that even though this is a neutral simulation, all of these parameters need to be specified to reasonable values. The simulation uses periodic lateral boundary conditions by default. Constant pressure gradient \u00b6 A constant pressure gradient in x is set by & INPS dpdx = 0.0001 Output: instantaneous fields \u00b6 The simulation output contains the 3D instantaneous fields of u, v, and w. The output is produced after every 10 seconds of simulation runtime. We specify this by setting: & OUTPUT lfielddump = . true . fieldvars = 'u0,v0,w0' tfielddump = 1 0. 002 \u00b6 This simulation has a similar setup to 001 and additionally contains buildings. Aligned cuboid buildings \u00b6 The simulation contains aligned cube-shaped buildings, which can be automatically added by the pre-processing by setting: & INPS lcube = . true . blockheight = 16 blockwidth = 16 canyonwidth = 16 The corresponding number of blocks (including blocks on the floor) and block facets are (these are updated automatically by the preprocessing routine): & WALLS nblocks = 17 nfcts = 33 Output: space-time averaged profiles \u00b6 The simulation output contains 1D space-averaged and space-time-averaged vertical profiles. The output is produced after every 10 seconds of simulation runtime and the time-average uses a sample time step of 1 second. We specify this by setting: & OUTPUT lxydump = . true . lxytdump = . true . tstatsdump = 1 0. tsample = 1. Non-neutral simulations \u00b6 101 \u00b6 Infinite canyon buildings \u00b6 This simulation has \"infinite canyons\" along the y-axis as buildings. We set this by using & INPS lcanyons = . true . blockheight = 16 blockwidth = 16 canyonwidth = 16 Output: space-averaged along y \u00b6 Because there is no change in building geometry along y, it makes sense to look at the 2D statistics space-averaged along the y direction (with and without time-averaging): & OUTPUT lydump = . true . lytdump = . true . Volume flow rate forcing in x \u00b6 The simulation is driven by a fixed volume-flow rate forcing, which prescribes the domain-average velocity of u = 1.5 m/s: & PHYSICS luvolflowr = . true . uflowrate = 1.5 Temperature \u00b6 The simulation also considers changes in temperature. We therefore need to set & PHYSICS lbuoyancy = . true . ltempeq = . true . set an initial temperature profile (using the surface temperature thl0 and the default lapse rate) & INPS thl0 = 29 0. and specify the advection scheme for temperature: & DYNAMICS iadv_thl = 2 Isothermal BC for temperature \u00b6 The temperature on the facets is set by the values in Tfacinit.f90 (288 K in this case). These temperatures do not change as the energy balance is not used as a default ( lEB = .false. ). A fixed temperature at the the top of the domain ( thl_top ) is set by & BC thl_top = 28 5. BCtopT = 2 The temperature flux between the building walls and surrounding air is determined by wall functions: & WALLS iwalltemp = 2 Passive scalars line source \u00b6 A passive scalar line source is set by & SCALARS nsv = 1 lscasrcl = . true . SS = 1. sigS = 0.5 and by specifying the scalar advection scheme: & DYNAMICS iadv_sv = 7 Output: instantaneous fields for temperature and scalars \u00b6 We added the temperature and scalar concentration to the instantaneous fields: & OUTPUT fieldvars = 'u0,v0,w0,th,s1' 102 \u00b6 Domain Output slice 3D output The basic setup of this simulation is similar to 101 . Prerequisites for warmstart simulation \u00b6 The simulation is continued from a previous simulation with a similar setup. The restart files ( initd and inits for scalars) containing all relevant field data is saved in the example directory. The restart files are currently not included in the directory and can be downloaded examples_warmstart_102.zip or from the command line (Linux/macOS) with # From top-level project directory. # Download required files pushd u-dales/examples/102/ curl -o examples_warmstart_102.zip -L https://www.dropbox.com/sh/20rsgpt0gh09gr7/AABuoCFtn6_zFTxx4k8pKqvLa?dl = 1 unzip examples_warmstart_102.zip popd A warmstart simulation is required to have the same basic setup as the simulation is based on, including the numbers of CPUs it is run with. The example warmstart files are run on two CPUs, therefore this simulation will also require two CPUs. An alternative to running this simulation based on the previous output is described under Coldstart . Staggered cuboid buildings \u00b6 The simulation has staggered cuboid buildings, which can be set up using & INPS lstaggered = . true . Volume flow rate forcing in x and y \u00b6 The simulation is driven by a fixed volume-flow rate forcing for u and v: & PHYSICS luvolflowr = . true . uflowrate = 1.5 lvvolflowr = . true . vflowrate = 0.3 Constant thermal flux BC for temperature \u00b6 The temperature is determined by a constant thermal flux from the roads, building roofs and the top of the domain ( iwalltemp = 1 by default): & BC wtsurf = - 0.01 wttop = - 0.01 bctfz = - 0.01 Passive scalars point source \u00b6 The simulation contains a scalar field with a scalar point source: & SCALARS lscasrc = . true . SS = 1. sigS = 0.5 xS = 4. yS = 8. zS = 3. Scalar inflow-outflow BC \u00b6 The scalar concentration is not determined by periodic boundary conditions like momentum and temperature, but leaves the domain at the outflow plane: & BC BCxs = 2 The inlet profile is determined by the profile found in scalar.inp.102 (defaults to 0. if unspecified) Warmstart \u00b6 A warmstart simulation requires setting & RUN lwarmstart = . true . startfile = 'initd00003172_xxx.102' where the name of the startfile needs to match the name of the restart files (xxx instead of processor number). For a warmstart containing scalar concentration fields you need to additionally set & SCALARS lreadscal = . true . Coldstart \u00b6 This describes an alternative, if the warmstart files are not available. Run the simulation with recommended runtime of >= 1000 s and save the restart files by setting the restart time accordingly: & RUN lwarmstart = . false . runtime = 100 1. trestart = 100 0. Then, change the switches as described above, and make sure startfile matches the name of your restart files. Energy balance simulation \u00b6 201 \u00b6 Pre-defined buildings \u00b6 The buildings are read in by a file containing the block geometries: & INPS lblocksfile = . true . blocksfile = buildings . 201 Grid-stretching in z \u00b6 The vertical grid resolution is stretched by setting up the following parameters: & INPS zsize = 160 lzstretch = . true . stretchconst = 0.01 lstretchexp = . true . hlin = 40 dzlin = 1 zsize is an initial target value for the final domain height and hlin determines how many non-stretched grid cells there are at the lower end of the domain. Make sure to always use non-stretched grid cells wherever buildings are present. dzlin specifies the resolution for the non-stretched grid cells. lstretchexp specifies the exponential grid stretching function to be used. Output: time averaged fields \u00b6 We add 3D output fields that are averaged in time: & OUTPUT ltdump = . true . Energy Balance \u00b6 The simulations solves the surface energy balance. & ENERGYBALANCE lEB = . true . lconstW = . true . dtEB = 2. bldT = 30 1.0 wsoil = 31 4.0 wgrmax = 45 1.0 wwilt = 17 2.0 wfc = 31 4.0 skyLW = 20 1.0 GRLAI = 2.1 rsmin = 20 0.0 For that we also need to use wall functions for temperature and moisture at the building facets: & WALLS iwalltemp = 2 iwallmoist = 2 Moisture \u00b6 The energybalance contains a latent heat flux and therefore we need to solve the full wet thermodynamics including moisture: & PHYSICS lmoist = . true . The advection scheme for moisture is specified by: & DYNAMICS iadv_qt = 2 and domain top- values are chosen: & BC qt_top = 0.0 Coriolis forcing and nudging \u00b6 A coriolis force is specified: & PHYSICS lcoriol = . true . The geostrophic velocity is defined by default as a uniform profile of the initial velocity: & INPS u0 = 1.5 Nudging is applied in the top 64 cells of the domain with a relaxation timescale of 10800 seconds: & PHYSICS lnudge = . true . tnudge = 1080 0. nnudge = 64 Driver simulation \u00b6 501 \u00b6 This simulation is similar to 101 but does not contain any scalars. It is used as the precursor simulation for simulation 502 . Driver/precursor simulation \u00b6 To save the output of a simulation into files that can be read by another simulation as driver-inputs, we set: & DRIVER idriver = 1 tdriverstart = 0 dtdriver = 0.15 driverstore = 201 iplane = 128 iplane sets the index of the y-z plane we store (here this is equal to the outlet plane), and (driverstore-1)*dtdriver determines for how long you can run the driven simulation. The time when we start recording the planes should therefore be tdriverstart <= runtime - (driverstore-1)*dtdriver . More information on these parameters is in the documentation on simulation setup . 502 \u00b6 Prerequisites simulation with external forcing \u00b6 The driver input files are currently not included in the directory and can be downloaded examples_driver_501.zip or from the command line (Linux/macOS) with # From top-level project directory. # Download required files pushd u-dales/examples/502/ curl -o examples_driver_501.zip -L https://www.dropbox.com/sh/spld3hqipqe17j1/AAA0cuzW3qc9ftY6dvHcSSL8a?dl = 1 unzip examples_driver_501.zip popd These *driver* files need to be in the same place as the other input files. Alternatively, the *driver* files from simulation 501 can be used by copying them into the directory of 502. For that we recommend to set the runtime to at least 1000 s, and tdriverstart accordingly with tdriverstart <= runtime - (driverstore-1)*dtdriver . Buildings from LIDAR image \u00b6 The buildings of this simulation are generated from a grey-scale image of the buildings and their heights. & INPS llidar = . true . sourcename = DAPPLE7 . png dxinp = 1 dyinp = 1 dzinp = 1 centeri = 400 centerj = 400 maxh = 25 pad = 3 smallarea = 150 Driven simulation \u00b6 This simulation is forced by the data from the stored outlet plane of simulation 501 : & DRIVER idriver = 2 driverjobnr = 501 driverstore = 201 The runtime of this simulation is restricted by the simulation time of the driver output, which is (driverstore-1)*dtdriver of the precursor simulation 501 . The maximum runtime we can set is therefore runtime = 3 0. dtmax = 0.15 and we want to set dtmax = dtdriver ( 501 ) to avoid interpolation of the driver snapshots. All boundary conditions (momentum, temperature) are set to inflow-outflow by: & BC BCxm = 5 for which we will also need to use the cyclic reduction scheme of the poisson solver: & DYNAMICS ipoiss = 1","title":"Examples"},{"location":"udales-example-simulations/#example-simulations","text":"uDALES simulates a large variety of urban case studies. Here we showcase a few examples ( List of examples ) with different atmospheric stabilities and various setups (overview in Table 1 ) to help you get started. The setups are in the namoptions file of your simulation. Note that we limited the simulation time to just a few minutes for demonstration, if you are looking to conduct realistic simulations, you need a much longer simulation time. If you wish to run all examples automatically and plot inputs and outputs as shown in this guide, follow the instructions detailed in the development notes instead.","title":"Example simulations"},{"location":"udales-example-simulations/#prerequisites","text":"All examples below assume that you have installed uDALES as per our getting started guide . Set up the paths and variables for running the simulation, for example with the following: # We assume you are running the following commands from your # top-level project directory. export DA_TOOLSDIR = $( pwd ) /u-dales/tools # Directory of scripts export DA_BUILD = $( pwd ) /u-dales/build/release/u-dales # Build file export NCPU = 2 # Number of CPUs to use for a simulation export DA_WORKDIR = $( pwd ) /outputs # Output top-level directory","title":"Prerequisites"},{"location":"udales-example-simulations/#run","text":"Example cases are located under u-dales/examples . All examples are run using the following command: # We assume you are running the following commands from your # top-level project directory. # General syntax: local_execute.sh exp_directory ./u-dales/tools/local_execute.sh u-dales/examples/001","title":"Run"},{"location":"udales-example-simulations/#customising-simulations","text":"If you want to make any changes to the example simulations, e.g. changing the domain size, follow the set-up steps in the getting started guide to obtain a copy of the simulation setup and make the changes to your copy of the setup. You may need to run some pre-processing steps (see Pre-processing ) before running the simulation. These cases are indicated as such in Table 1 .","title":"Customising simulations"},{"location":"udales-example-simulations/#main-simulation-set-up-options","text":"Below is a list of common setups and options for urban case studies. A complete list of all options available with uDALES can be found in the Configuration document. Table 1: Main setups of urban case studies and reference example simulation(s). Type Setting Requires pre-processing Example simulation Domain size and resolution yes all Domain equidistant grid yes 001, 002, 101, 102, 501, 502 Domain stretched z-grid yes 201 Domain warmstart no 102 Morphology no buildings yes 001 Morphology infinite canyon builings yes 101 Morphology aligned cuboid buildings yes 002, 501 Morphology staggered cuboid buildings yes 102 Morphology pre-defined buildings yes 201 Morphology LIDAR-image buildings yes 502 Forcing pressure gradient yes 001 Forcing volume flow rate no 101, 102, 501 Forcing outflow rate no -- Forcing free stream velocity no -- Forcing Coriolis and nudging yes 201 Forcing driving data no 502 Lateral momentum boundary conditions (BCs) periodic no 001, 002, 101, 102, 201, 501 Lateral momentum BCs driving data no 502 Passive scalar source point source no 102 Passive scalar source line source no 101 Passive scalar source source network no -- Lateral scalar BCs periodic no 101, 501 Lateral scalar BCs inflow-outflow no 102 Surface and top scalar BCs zero flux no -- Surface and top scalar BCs constant flux no 102 Surface and top scalar BCs isothermal no 101, 501 Surface and top scalar BCs energy balance yes 201 Output instantaneous fields no 001, 101, 102, 201, 502 Output time-averaged fields no 201, 502 Output space-averaged (along y) fields no 101 Output space-averaged (along x,y) profiles no 002, 102, 201, 501, 502","title":"Main simulation set-up options"},{"location":"udales-example-simulations/#list-of-examples","text":"Standard simulation setup Neutral simulations 001 No buildings, bottom surface roughness Constant pressure gradient Output: instantaneous fields 002 Aligned cuboid buildings Output: space-time averaged profiles Non-neutral simulations 101 Infinite canyon buildings Output: space-averaged along y Volume flow rate forcing in x Temperature Isothermal BC for temperature Passive scalars line source Output: instantaneous fields for temperature and scalars 102 Prerequisites for warmstart simulation Staggered cuboid buildings Volume flow rate forcing in x and y Constant thermal flux BC for temperature Passive scalars point source Scalar inflow-outflow BC Warmstart Coldstart Energy balance simulation 201 Pre-defined buildings Grid-stretching in z Output: time averaged fields Energy Balance Moisture Coriolis forcing and nudging Driver simulation 501 Driver/precursor simulation 502 Prerequisites simulation with external forcing Buildings from LIDAR image Driven simulation","title":"List of examples"},{"location":"udales-example-simulations/#standard-simulation-setup","text":"The below setups are required for any type of simulation. The simulation domain varies amongst the example simulations and is set-up for example by & DOMAIN imax = 64 jtot = 64 kmax = 64 xsize = 64 ysize = 64 & INPS zsize = 64 We also set an initial profile for u-wind velocity (and other variables if they are used) of e.g. u = 2 m/s by & INPS u0 = 2. and add some random perturbations to the initial field, such that turbulence develops faster: randu = 0.01 Changes in the domain and initial profiles require pre-processing. Further, we recommend running the simulations with adaptive time-stepping, the Fast-Fourier-Transformation algorithm in the poisson solver ( this will become default in the future ) and using the Vreman sub-grid model: & RUN ladaptive = . true . & DYNAMICS ipoiss = 0 & NAMSUBGRID lvreman = . true . Further information on these parameters is in the Namoptions overview , and more on the required pre-processing steps is found in Pre-processing .","title":"Standard simulation setup"},{"location":"udales-example-simulations/#neutral-simulations","text":"","title":"Neutral simulations"},{"location":"udales-example-simulations/#001","text":"","title":"001"},{"location":"udales-example-simulations/#no-buildings-bottom-surface-roughness","text":"This simulation does not contain any buildings. Therefore we need to set: & INPS lflat = . true . & WALLS nfcts = 0 A rough surface at the bottom is simulated by setting the following parameters: & BC wtsurf = 0. wqsurf = 0. thls = 28 8. z0 = 0.01 z0h = 0.000067 where z0 is the roughness length for momentum. Note that even though this is a neutral simulation, all of these parameters need to be specified to reasonable values. The simulation uses periodic lateral boundary conditions by default.","title":"No buildings, bottom surface roughness"},{"location":"udales-example-simulations/#constant-pressure-gradient","text":"A constant pressure gradient in x is set by & INPS dpdx = 0.0001","title":"Constant pressure gradient"},{"location":"udales-example-simulations/#output-instantaneous-fields","text":"The simulation output contains the 3D instantaneous fields of u, v, and w. The output is produced after every 10 seconds of simulation runtime. We specify this by setting: & OUTPUT lfielddump = . true . fieldvars = 'u0,v0,w0' tfielddump = 1 0.","title":"Output: instantaneous fields"},{"location":"udales-example-simulations/#002","text":"This simulation has a similar setup to 001 and additionally contains buildings.","title":"002"},{"location":"udales-example-simulations/#aligned-cuboid-buildings","text":"The simulation contains aligned cube-shaped buildings, which can be automatically added by the pre-processing by setting: & INPS lcube = . true . blockheight = 16 blockwidth = 16 canyonwidth = 16 The corresponding number of blocks (including blocks on the floor) and block facets are (these are updated automatically by the preprocessing routine): & WALLS nblocks = 17 nfcts = 33","title":"Aligned cuboid buildings"},{"location":"udales-example-simulations/#output-space-time-averaged-profiles","text":"The simulation output contains 1D space-averaged and space-time-averaged vertical profiles. The output is produced after every 10 seconds of simulation runtime and the time-average uses a sample time step of 1 second. We specify this by setting: & OUTPUT lxydump = . true . lxytdump = . true . tstatsdump = 1 0. tsample = 1.","title":"Output: space-time averaged profiles"},{"location":"udales-example-simulations/#non-neutral-simulations","text":"","title":"Non-neutral simulations"},{"location":"udales-example-simulations/#101","text":"","title":"101"},{"location":"udales-example-simulations/#infinite-canyon-buildings","text":"This simulation has \"infinite canyons\" along the y-axis as buildings. We set this by using & INPS lcanyons = . true . blockheight = 16 blockwidth = 16 canyonwidth = 16","title":"Infinite canyon buildings"},{"location":"udales-example-simulations/#output-space-averaged-along-y","text":"Because there is no change in building geometry along y, it makes sense to look at the 2D statistics space-averaged along the y direction (with and without time-averaging): & OUTPUT lydump = . true . lytdump = . true .","title":"Output: space-averaged along y"},{"location":"udales-example-simulations/#volume-flow-rate-forcing-in-x","text":"The simulation is driven by a fixed volume-flow rate forcing, which prescribes the domain-average velocity of u = 1.5 m/s: & PHYSICS luvolflowr = . true . uflowrate = 1.5","title":"Volume flow rate forcing in x"},{"location":"udales-example-simulations/#temperature","text":"The simulation also considers changes in temperature. We therefore need to set & PHYSICS lbuoyancy = . true . ltempeq = . true . set an initial temperature profile (using the surface temperature thl0 and the default lapse rate) & INPS thl0 = 29 0. and specify the advection scheme for temperature: & DYNAMICS iadv_thl = 2","title":"Temperature"},{"location":"udales-example-simulations/#isothermal-bc-for-temperature","text":"The temperature on the facets is set by the values in Tfacinit.f90 (288 K in this case). These temperatures do not change as the energy balance is not used as a default ( lEB = .false. ). A fixed temperature at the the top of the domain ( thl_top ) is set by & BC thl_top = 28 5. BCtopT = 2 The temperature flux between the building walls and surrounding air is determined by wall functions: & WALLS iwalltemp = 2","title":"Isothermal BC for temperature"},{"location":"udales-example-simulations/#passive-scalars-line-source","text":"A passive scalar line source is set by & SCALARS nsv = 1 lscasrcl = . true . SS = 1. sigS = 0.5 and by specifying the scalar advection scheme: & DYNAMICS iadv_sv = 7","title":"Passive scalars line source"},{"location":"udales-example-simulations/#output-instantaneous-fields-for-temperature-and-scalars","text":"We added the temperature and scalar concentration to the instantaneous fields: & OUTPUT fieldvars = 'u0,v0,w0,th,s1'","title":"Output: instantaneous fields for temperature and scalars"},{"location":"udales-example-simulations/#102","text":"Domain Output slice 3D output The basic setup of this simulation is similar to 101 .","title":"102"},{"location":"udales-example-simulations/#prerequisites-for-warmstart-simulation","text":"The simulation is continued from a previous simulation with a similar setup. The restart files ( initd and inits for scalars) containing all relevant field data is saved in the example directory. The restart files are currently not included in the directory and can be downloaded examples_warmstart_102.zip or from the command line (Linux/macOS) with # From top-level project directory. # Download required files pushd u-dales/examples/102/ curl -o examples_warmstart_102.zip -L https://www.dropbox.com/sh/20rsgpt0gh09gr7/AABuoCFtn6_zFTxx4k8pKqvLa?dl = 1 unzip examples_warmstart_102.zip popd A warmstart simulation is required to have the same basic setup as the simulation is based on, including the numbers of CPUs it is run with. The example warmstart files are run on two CPUs, therefore this simulation will also require two CPUs. An alternative to running this simulation based on the previous output is described under Coldstart .","title":"Prerequisites for warmstart simulation"},{"location":"udales-example-simulations/#staggered-cuboid-buildings","text":"The simulation has staggered cuboid buildings, which can be set up using & INPS lstaggered = . true .","title":"Staggered cuboid buildings"},{"location":"udales-example-simulations/#volume-flow-rate-forcing-in-x-and-y","text":"The simulation is driven by a fixed volume-flow rate forcing for u and v: & PHYSICS luvolflowr = . true . uflowrate = 1.5 lvvolflowr = . true . vflowrate = 0.3","title":"Volume flow rate forcing in x and y"},{"location":"udales-example-simulations/#constant-thermal-flux-bc-for-temperature","text":"The temperature is determined by a constant thermal flux from the roads, building roofs and the top of the domain ( iwalltemp = 1 by default): & BC wtsurf = - 0.01 wttop = - 0.01 bctfz = - 0.01","title":"Constant thermal flux BC for temperature"},{"location":"udales-example-simulations/#passive-scalars-point-source","text":"The simulation contains a scalar field with a scalar point source: & SCALARS lscasrc = . true . SS = 1. sigS = 0.5 xS = 4. yS = 8. zS = 3.","title":"Passive scalars point source"},{"location":"udales-example-simulations/#scalar-inflow-outflow-bc","text":"The scalar concentration is not determined by periodic boundary conditions like momentum and temperature, but leaves the domain at the outflow plane: & BC BCxs = 2 The inlet profile is determined by the profile found in scalar.inp.102 (defaults to 0. if unspecified)","title":"Scalar inflow-outflow BC"},{"location":"udales-example-simulations/#warmstart","text":"A warmstart simulation requires setting & RUN lwarmstart = . true . startfile = 'initd00003172_xxx.102' where the name of the startfile needs to match the name of the restart files (xxx instead of processor number). For a warmstart containing scalar concentration fields you need to additionally set & SCALARS lreadscal = . true .","title":"Warmstart"},{"location":"udales-example-simulations/#coldstart","text":"This describes an alternative, if the warmstart files are not available. Run the simulation with recommended runtime of >= 1000 s and save the restart files by setting the restart time accordingly: & RUN lwarmstart = . false . runtime = 100 1. trestart = 100 0. Then, change the switches as described above, and make sure startfile matches the name of your restart files.","title":"Coldstart"},{"location":"udales-example-simulations/#energy-balance-simulation","text":"","title":"Energy balance simulation"},{"location":"udales-example-simulations/#201","text":"","title":"201"},{"location":"udales-example-simulations/#pre-defined-buildings","text":"The buildings are read in by a file containing the block geometries: & INPS lblocksfile = . true . blocksfile = buildings . 201","title":"Pre-defined buildings"},{"location":"udales-example-simulations/#grid-stretching-in-z","text":"The vertical grid resolution is stretched by setting up the following parameters: & INPS zsize = 160 lzstretch = . true . stretchconst = 0.01 lstretchexp = . true . hlin = 40 dzlin = 1 zsize is an initial target value for the final domain height and hlin determines how many non-stretched grid cells there are at the lower end of the domain. Make sure to always use non-stretched grid cells wherever buildings are present. dzlin specifies the resolution for the non-stretched grid cells. lstretchexp specifies the exponential grid stretching function to be used.","title":"Grid-stretching in z"},{"location":"udales-example-simulations/#output-time-averaged-fields","text":"We add 3D output fields that are averaged in time: & OUTPUT ltdump = . true .","title":"Output: time averaged fields"},{"location":"udales-example-simulations/#energy-balance","text":"The simulations solves the surface energy balance. & ENERGYBALANCE lEB = . true . lconstW = . true . dtEB = 2. bldT = 30 1.0 wsoil = 31 4.0 wgrmax = 45 1.0 wwilt = 17 2.0 wfc = 31 4.0 skyLW = 20 1.0 GRLAI = 2.1 rsmin = 20 0.0 For that we also need to use wall functions for temperature and moisture at the building facets: & WALLS iwalltemp = 2 iwallmoist = 2","title":"Energy Balance"},{"location":"udales-example-simulations/#moisture","text":"The energybalance contains a latent heat flux and therefore we need to solve the full wet thermodynamics including moisture: & PHYSICS lmoist = . true . The advection scheme for moisture is specified by: & DYNAMICS iadv_qt = 2 and domain top- values are chosen: & BC qt_top = 0.0","title":"Moisture"},{"location":"udales-example-simulations/#coriolis-forcing-and-nudging","text":"A coriolis force is specified: & PHYSICS lcoriol = . true . The geostrophic velocity is defined by default as a uniform profile of the initial velocity: & INPS u0 = 1.5 Nudging is applied in the top 64 cells of the domain with a relaxation timescale of 10800 seconds: & PHYSICS lnudge = . true . tnudge = 1080 0. nnudge = 64","title":"Coriolis forcing and nudging"},{"location":"udales-example-simulations/#driver-simulation","text":"","title":"Driver simulation"},{"location":"udales-example-simulations/#501","text":"This simulation is similar to 101 but does not contain any scalars. It is used as the precursor simulation for simulation 502 .","title":"501"},{"location":"udales-example-simulations/#driverprecursor-simulation","text":"To save the output of a simulation into files that can be read by another simulation as driver-inputs, we set: & DRIVER idriver = 1 tdriverstart = 0 dtdriver = 0.15 driverstore = 201 iplane = 128 iplane sets the index of the y-z plane we store (here this is equal to the outlet plane), and (driverstore-1)*dtdriver determines for how long you can run the driven simulation. The time when we start recording the planes should therefore be tdriverstart <= runtime - (driverstore-1)*dtdriver . More information on these parameters is in the documentation on simulation setup .","title":"Driver/precursor simulation"},{"location":"udales-example-simulations/#502","text":"","title":"502"},{"location":"udales-example-simulations/#prerequisites-simulation-with-external-forcing","text":"The driver input files are currently not included in the directory and can be downloaded examples_driver_501.zip or from the command line (Linux/macOS) with # From top-level project directory. # Download required files pushd u-dales/examples/502/ curl -o examples_driver_501.zip -L https://www.dropbox.com/sh/spld3hqipqe17j1/AAA0cuzW3qc9ftY6dvHcSSL8a?dl = 1 unzip examples_driver_501.zip popd These *driver* files need to be in the same place as the other input files. Alternatively, the *driver* files from simulation 501 can be used by copying them into the directory of 502. For that we recommend to set the runtime to at least 1000 s, and tdriverstart accordingly with tdriverstart <= runtime - (driverstore-1)*dtdriver .","title":"Prerequisites simulation with external forcing"},{"location":"udales-example-simulations/#buildings-from-lidar-image","text":"The buildings of this simulation are generated from a grey-scale image of the buildings and their heights. & INPS llidar = . true . sourcename = DAPPLE7 . png dxinp = 1 dyinp = 1 dzinp = 1 centeri = 400 centerj = 400 maxh = 25 pad = 3 smallarea = 150","title":"Buildings from LIDAR image"},{"location":"udales-example-simulations/#driven-simulation","text":"This simulation is forced by the data from the stored outlet plane of simulation 501 : & DRIVER idriver = 2 driverjobnr = 501 driverstore = 201 The runtime of this simulation is restricted by the simulation time of the driver output, which is (driverstore-1)*dtdriver of the precursor simulation 501 . The maximum runtime we can set is therefore runtime = 3 0. dtmax = 0.15 and we want to set dtmax = dtdriver ( 501 ) to avoid interpolation of the driver snapshots. All boundary conditions (momentum, temperature) are set to inflow-outflow by: & BC BCxm = 5 for which we will also need to use the cyclic reduction scheme of the poisson solver: & DYNAMICS ipoiss = 1","title":"Driven simulation"},{"location":"udales-getting-started/","text":"Getting Started \u00b6 Getting started with uDALES to set up your own experiments is straightforward. This guide goes through the steps required to install uDALES, and set-up and run a simple example. Singularity \u00b6 If you have Singularity available on your system, you can use the provided scripts under tools/singularity to build and run uDALES cases locally or on HPC environments, for other options, see the sections below. The use of Singularity is undoubtedly the easiest way to build and run cases in uDALES as all dependencies are provided and uDALES will compile out of the box. Furthermore, users wishing to achieve a reasonable level of scientific reproducibility may archive software, tools, and data with their Singularity image containing OS and external libraries to an open access repository (e.g. Meyer et al., 2020 ). To build and download the Singularity image use: singularity build --remote tools/singularity/image.sif tools/singularity/image.def then, to install uDALES use: # udales_build.sh <NPROC> [Debug, Release] ./tools/singularity/udales_build.sh 2 Release Finally, to run an example case use: # udales_run.sh <NPROC> <BUILD_TYPE> <PATH_TO_CASE> <NAMELIST> ./tools/singularity/udales_run.sh 2 Release examples/001 namoptions.001 If you are looking to run the build and run commands on HPC, we have provided a sample script under tools/singularity/udales_pbs_submit.sh , you can modify and run it with qsub tools/singularity/udales_pbs_submit.sh . Prerequisites \u00b6 uDALES \u00b6 uDALES is supported to run on Linux, macOS and Windows Subsystem for Linux (WSL). Please ensure that the latest version of the following libraries and software are available on your system: CMake >= 3.9. NetCDF-Fortran >= 4. GNU <= 9, Intel , or Cray Fortran compiler. A recenet version of MPICH or Open-MPI . Project setup \u00b6 This guide helps you set up a project template for uDALES with a generic folder structure set-up that you can later use to set up your own experiments. For this you also need: Git >= 2. A GitHub account. (optional) Python >= 3.6. Pre-processing \u00b6 When you create your own experiments, you will need to set up specific input files. We have a system in place that does that for you, written in MATLAB. Information can be found under pre-processing and is not discussed in the getting-started set-up. MATLAB Post-processing \u00b6 For better organised netcdf output files, you will need: netCDF Operators (NCO). On local systems, these software and libraries (except MATLAB) should be available from your system's package manager (e.g. APT, yum, Homebrew, etc.) and examples on how to install all the required libraries for Linux/WSL and macOS are given below. On high performance computing (HPC) clusters, these software and libraries should have already been installed. Please refer to the specific documentation to load the above software and libraries. Alternatively, you can install all the required packages easily after installing Linuxbrew and using the instructions for macOS . Linux/WSL (Ubuntu) \u00b6 sudo apt-get update && sudo apt-get upgrade -y sudo apt-get install -y git cmake gfortran libopenmpi-dev openmpi-bin libnetcdf-dev libnetcdff-dev nco python3 python3-pip macOS \u00b6 On macOS, use Homebrew to install the required libraries. If you do not have Homebrew installed on your system, install it from the Homebrew installation page then, to install all the required dependencies, including support for MPI, run the following commands from your terminal prompt: brew update brew install git cmake gcc@9 netcdf open-mpi nco python3 Installation \u00b6 The installation and set-up of uDALES is straightforward thanks to the use of a Cookiecutter repository to create a project template for uDALES with a generic folder structure set-up that you can later use to set up your own experiments. Please make sure that you have created a new (private) repository on your GitHub account and made note of the URL as we need this later to configure Cookiecutter. Repository set-up \u00b6 First, install Cookiecutter from your command prompt: python3 -m pip install --user cookiecutter Then, to create a new uDALES project within the current working directory: cookiecutter https://github.com/uDALES/cookiecutter-u-dales and fill in the required fields when prompted. <PROJECT_NAME> is the name of the generated project directory and <GITHUB_PROJECT_REMOTE> is the URL to your remote GitHub account (this is optional, you can just press the return key to leave this empty). E.g.: directory_name [ <PROJECT_NAME> ] : neutral_experiments github_project_remote [ <GITHUB_PROJECT_REMOTE> ] : https://github.com/<MY_GITHUB_USERNAME>/<MY_NEW_EMPTY_REPO>.git This creates a Git repository for your own projects named <PROJECT_NAME> with the uDALES model development repository as submodule, and a generic tree that you can use to set up your own experiments: . \u251c\u2500\u2500 data # Contains or links to any external data used by the experiments. \u251c\u2500\u2500 docs # Relevant documentation or papers used for the experiment. \u251c\u2500\u2500 experiments # Configuration files grouped by experiment number. \u2502 \u2514\u2500\u2500 <N> # Any configurations files needed by uDALES to run experiment <N>. \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 tools # Additional or specialized tools other then the ones included with uDALES. \u2514\u2500\u2500 u-dales # uDALES model development repository (submodule). In the next steps we will assume your current working directory is the top-level project directory you just created with Cookiecutter. Build on common systems \u00b6 On standard systems and configurations, you can build uDALES with the following commands: # We assume you are running the following commands from your # top-level project directory. mkdir -p u-dales/build/release # in case you want to later create a build/debug pushd u-dales/build/release cmake -LA ../.. make popd You can compile in parallel mode by passing Make the j flag followed by the number of CPU cores to use. For example, to compile with 2 cores do make -j2 . Build on HPCs \u00b6 If you are a High Performance Cluster (HPC) user you are likely using the Environment Modules package for the dynamic modification of the user's environment via modulefiles and therefore you may need to hint CMake the PATH to NetCDF (see below how). Here we show how to compile uDALES using the HPC at ICL as an example, therefore please note that the specific names/versions installed on your system may be different. module list # list currently enabled modules -- should be empty! module avail # list available modules # This is an example, please check with the previous command for the exact name of the # modules available on your system. This will load NetCDF compiled with Intel Suite # 2019.4 and add the correct version of icc and ifort to the PATH. module load intel-suite/2017.6 mpi/intel-2018 cmake/3.14.0 git/2.14.3 Then, to build the uDALES executable, run the following commands: # We assume you are running the following commands from your # top-level project directory. mkdir -p u-dales/build/release pushd u-dales/build/release FC = mpiifort cmake -DNETCDF_DIR = /apps/netcdf/4.4.1-c -DNETCDF_FORTRAN_DIR = /apps/netcdf/4.4.4-fortran -LA ../.. make popd where NETCDF_DIR and NETCDF_FORTRAN_DIR indicates the absolute path to your NetCDF-C and NetCDF-Fortran installation directories. Here, we use the utilities nc-config and nf-config to hint CMake the location of NetCDF, but you can simply pass the absolute path to the NetCDF-C and NetCDF-Fortran manually instead. You can compile in parallel mode by passing Make the j flag followed by the number of CPU cores to use. For example, to compile with 2 cores do make -j2 . Build defaults/options \u00b6 By default uDALES will compile in Release mode. You can change this by specifying the option (or flag) at configure time. The general syntax for specifying an option in CMake is -D<flag_name>=<flag_value> where <flag_name> is the option/flag name and <flag_value> is the option/flag value. The following options can be specified when configuring uDALES: Name Options Default Description CMAKE_BUILD_TYPE Release , Debug Release Whether to optimise/build with debug flags NETCDF4_DIR <path> - Path to NetCDF-C installation directory NETCDF_FORTRAN_DIR <path> - Path to NetCDF-Fortran installation directory SKIP_UPDATE_EXTERNAL_PROJECTS ON , OFF OFF Whether to skip updating external projects Set-up \u00b6 To set up a new simulation, copy_inputs.sh in u-dales/tools/ is used to create a new simulation setup new_exp_id based on another simulation old_exp_id . All exp_ids are three digit numbers, e.g. 001, and are stored in directories of that name. Scripts requires several variables to be set up. You can do this by copying and pasting the snippet below or by including it in a bash script (or bash profile if you are unlikely to change them). # We assume you are running the following commands from your # top-level project directory. export DA_EXPDIR = $( pwd ) /experiments # The top-level directory of the simulation setups. export DA_WORKDIR = $( pwd ) /outputs # Output top-level directory # If source directories (DA_EXPDIR_SRC, DA_WORKDIR_SRC) are not set, # the experiment set-up folder will be copied from the same target directory. # I.e. DA_EXPDIR_SRC==DA_EXPDIR and DA_WORKDIR_SRC==DA_WORKDIR. export DA_EXPDIR_SRC = $( pwd ) /u-dales/examples export DA_WORKDIR_SRC = $( pwd ) /u-dales/examples If you set up a new experiment on HPC, also use: export DA_WORKDIR = $EPHEMERAL # Output top-level directory on HPC export DA_WORKDIR_SRC = $EPHEMERAL Now to set-up a new experiment (here we use case 009 ) based on a previous example (here we use case 001 ), run: # We assume you are running the following commands from your # top-level project directory. # General syntax: copy_inputs.sh new_exp_id old_exp_id # To set up a new simulation starting from the restart files of another simulation # (\"warmstart\"), use the 'w' flag. E.g.: copy_inputs.sh new_exp_id old_exp_id w ./u-dales/tools/copy_inputs.sh 009 001 Run \u00b6 The scripts local_execute.sh and hpc_execute.sh in u-dales/tools are used as wrappers to run simulations on your local machine and HPC at ICL respectively. These scripts contain several helpers to run the simulations and merge outputs from several CPUs into a single file (see Post-processing for more info about the individual scripts). The scripts require several variables to be set up. Below is an example setup for copying and pasting. You can also specify these parameters in a config.sh file within the experiment directory, which is then read by the scripts. Note that you need to choose the number of CPUs you are using to run the simulation such that the number of grid cells in the y-direction ( jtot parameter in the namoptions input file) is a multiple of the number of CPUs. Run on common systems \u00b6 # We assume you are running the following commands from your # top-level project directory. export DA_TOOLSDIR = $( pwd ) /u-dales/tools # Directory of scripts export DA_BUILD = $( pwd ) /u-dales/build/release/u-dales # Build file export NCPU = 2 # Number of CPUs to use for a simulation export DA_WORKDIR = $( pwd ) /outputs # Output top-level directory Then, to start the simulation, run: # We assume you are running the following commands from your # top-level project directory. # General syntax: local_execute.sh exp_directory ./u-dales/tools/local_execute.sh experiments/009 Run on HPCs \u00b6 export DA_TOOLSDIR = $( pwd ) /u-dales/tools # Directory of scripts export DA_BUILD = $( pwd ) /u-dales/build/release/u-dales # Build file export NCPU = 2 # Number of CPUs to use for a simulation export NNODE = 1 # Number of nodes to use for a simulation export WALLTIME = \"00:30:00\" # Maximum runtime for simulation in hours:minutes:seconds export MEM = \"2gb\" # Memory request per node For guidance on how to set the parameters on HPC, have a look at Job sizing guidance . Then, to start the simulation, run: # We assume you are running the following commands from your # top-level project directory. # General syntax: hpc_execute.sh exp_directory ./u-dales/tools/hpc_execute.sh experiments/009 What's next? \u00b6 This simple guide is meant to allow you to get started based on an existing example. We set up several example simulations to get you started. To learn more about pre- and post-processing steps in uDALES, please see the pre-processing and post-processing pages.","title":"Getting Started"},{"location":"udales-getting-started/#getting-started","text":"Getting started with uDALES to set up your own experiments is straightforward. This guide goes through the steps required to install uDALES, and set-up and run a simple example.","title":"Getting Started"},{"location":"udales-getting-started/#singularity","text":"If you have Singularity available on your system, you can use the provided scripts under tools/singularity to build and run uDALES cases locally or on HPC environments, for other options, see the sections below. The use of Singularity is undoubtedly the easiest way to build and run cases in uDALES as all dependencies are provided and uDALES will compile out of the box. Furthermore, users wishing to achieve a reasonable level of scientific reproducibility may archive software, tools, and data with their Singularity image containing OS and external libraries to an open access repository (e.g. Meyer et al., 2020 ). To build and download the Singularity image use: singularity build --remote tools/singularity/image.sif tools/singularity/image.def then, to install uDALES use: # udales_build.sh <NPROC> [Debug, Release] ./tools/singularity/udales_build.sh 2 Release Finally, to run an example case use: # udales_run.sh <NPROC> <BUILD_TYPE> <PATH_TO_CASE> <NAMELIST> ./tools/singularity/udales_run.sh 2 Release examples/001 namoptions.001 If you are looking to run the build and run commands on HPC, we have provided a sample script under tools/singularity/udales_pbs_submit.sh , you can modify and run it with qsub tools/singularity/udales_pbs_submit.sh .","title":"Singularity"},{"location":"udales-getting-started/#prerequisites","text":"","title":"Prerequisites"},{"location":"udales-getting-started/#udales","text":"uDALES is supported to run on Linux, macOS and Windows Subsystem for Linux (WSL). Please ensure that the latest version of the following libraries and software are available on your system: CMake >= 3.9. NetCDF-Fortran >= 4. GNU <= 9, Intel , or Cray Fortran compiler. A recenet version of MPICH or Open-MPI .","title":"uDALES"},{"location":"udales-getting-started/#project-setup","text":"This guide helps you set up a project template for uDALES with a generic folder structure set-up that you can later use to set up your own experiments. For this you also need: Git >= 2. A GitHub account. (optional) Python >= 3.6.","title":"Project setup"},{"location":"udales-getting-started/#pre-processing","text":"When you create your own experiments, you will need to set up specific input files. We have a system in place that does that for you, written in MATLAB. Information can be found under pre-processing and is not discussed in the getting-started set-up. MATLAB","title":"Pre-processing"},{"location":"udales-getting-started/#post-processing","text":"For better organised netcdf output files, you will need: netCDF Operators (NCO). On local systems, these software and libraries (except MATLAB) should be available from your system's package manager (e.g. APT, yum, Homebrew, etc.) and examples on how to install all the required libraries for Linux/WSL and macOS are given below. On high performance computing (HPC) clusters, these software and libraries should have already been installed. Please refer to the specific documentation to load the above software and libraries. Alternatively, you can install all the required packages easily after installing Linuxbrew and using the instructions for macOS .","title":"Post-processing"},{"location":"udales-getting-started/#linuxwsl-ubuntu","text":"sudo apt-get update && sudo apt-get upgrade -y sudo apt-get install -y git cmake gfortran libopenmpi-dev openmpi-bin libnetcdf-dev libnetcdff-dev nco python3 python3-pip","title":"Linux/WSL (Ubuntu)"},{"location":"udales-getting-started/#macos","text":"On macOS, use Homebrew to install the required libraries. If you do not have Homebrew installed on your system, install it from the Homebrew installation page then, to install all the required dependencies, including support for MPI, run the following commands from your terminal prompt: brew update brew install git cmake gcc@9 netcdf open-mpi nco python3","title":"macOS"},{"location":"udales-getting-started/#installation","text":"The installation and set-up of uDALES is straightforward thanks to the use of a Cookiecutter repository to create a project template for uDALES with a generic folder structure set-up that you can later use to set up your own experiments. Please make sure that you have created a new (private) repository on your GitHub account and made note of the URL as we need this later to configure Cookiecutter.","title":"Installation"},{"location":"udales-getting-started/#repository-set-up","text":"First, install Cookiecutter from your command prompt: python3 -m pip install --user cookiecutter Then, to create a new uDALES project within the current working directory: cookiecutter https://github.com/uDALES/cookiecutter-u-dales and fill in the required fields when prompted. <PROJECT_NAME> is the name of the generated project directory and <GITHUB_PROJECT_REMOTE> is the URL to your remote GitHub account (this is optional, you can just press the return key to leave this empty). E.g.: directory_name [ <PROJECT_NAME> ] : neutral_experiments github_project_remote [ <GITHUB_PROJECT_REMOTE> ] : https://github.com/<MY_GITHUB_USERNAME>/<MY_NEW_EMPTY_REPO>.git This creates a Git repository for your own projects named <PROJECT_NAME> with the uDALES model development repository as submodule, and a generic tree that you can use to set up your own experiments: . \u251c\u2500\u2500 data # Contains or links to any external data used by the experiments. \u251c\u2500\u2500 docs # Relevant documentation or papers used for the experiment. \u251c\u2500\u2500 experiments # Configuration files grouped by experiment number. \u2502 \u2514\u2500\u2500 <N> # Any configurations files needed by uDALES to run experiment <N>. \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 tools # Additional or specialized tools other then the ones included with uDALES. \u2514\u2500\u2500 u-dales # uDALES model development repository (submodule). In the next steps we will assume your current working directory is the top-level project directory you just created with Cookiecutter.","title":"Repository set-up"},{"location":"udales-getting-started/#build-on-common-systems","text":"On standard systems and configurations, you can build uDALES with the following commands: # We assume you are running the following commands from your # top-level project directory. mkdir -p u-dales/build/release # in case you want to later create a build/debug pushd u-dales/build/release cmake -LA ../.. make popd You can compile in parallel mode by passing Make the j flag followed by the number of CPU cores to use. For example, to compile with 2 cores do make -j2 .","title":"Build on common systems"},{"location":"udales-getting-started/#build-on-hpcs","text":"If you are a High Performance Cluster (HPC) user you are likely using the Environment Modules package for the dynamic modification of the user's environment via modulefiles and therefore you may need to hint CMake the PATH to NetCDF (see below how). Here we show how to compile uDALES using the HPC at ICL as an example, therefore please note that the specific names/versions installed on your system may be different. module list # list currently enabled modules -- should be empty! module avail # list available modules # This is an example, please check with the previous command for the exact name of the # modules available on your system. This will load NetCDF compiled with Intel Suite # 2019.4 and add the correct version of icc and ifort to the PATH. module load intel-suite/2017.6 mpi/intel-2018 cmake/3.14.0 git/2.14.3 Then, to build the uDALES executable, run the following commands: # We assume you are running the following commands from your # top-level project directory. mkdir -p u-dales/build/release pushd u-dales/build/release FC = mpiifort cmake -DNETCDF_DIR = /apps/netcdf/4.4.1-c -DNETCDF_FORTRAN_DIR = /apps/netcdf/4.4.4-fortran -LA ../.. make popd where NETCDF_DIR and NETCDF_FORTRAN_DIR indicates the absolute path to your NetCDF-C and NetCDF-Fortran installation directories. Here, we use the utilities nc-config and nf-config to hint CMake the location of NetCDF, but you can simply pass the absolute path to the NetCDF-C and NetCDF-Fortran manually instead. You can compile in parallel mode by passing Make the j flag followed by the number of CPU cores to use. For example, to compile with 2 cores do make -j2 .","title":"Build on HPCs"},{"location":"udales-getting-started/#build-defaultsoptions","text":"By default uDALES will compile in Release mode. You can change this by specifying the option (or flag) at configure time. The general syntax for specifying an option in CMake is -D<flag_name>=<flag_value> where <flag_name> is the option/flag name and <flag_value> is the option/flag value. The following options can be specified when configuring uDALES: Name Options Default Description CMAKE_BUILD_TYPE Release , Debug Release Whether to optimise/build with debug flags NETCDF4_DIR <path> - Path to NetCDF-C installation directory NETCDF_FORTRAN_DIR <path> - Path to NetCDF-Fortran installation directory SKIP_UPDATE_EXTERNAL_PROJECTS ON , OFF OFF Whether to skip updating external projects","title":"Build defaults/options"},{"location":"udales-getting-started/#set-up","text":"To set up a new simulation, copy_inputs.sh in u-dales/tools/ is used to create a new simulation setup new_exp_id based on another simulation old_exp_id . All exp_ids are three digit numbers, e.g. 001, and are stored in directories of that name. Scripts requires several variables to be set up. You can do this by copying and pasting the snippet below or by including it in a bash script (or bash profile if you are unlikely to change them). # We assume you are running the following commands from your # top-level project directory. export DA_EXPDIR = $( pwd ) /experiments # The top-level directory of the simulation setups. export DA_WORKDIR = $( pwd ) /outputs # Output top-level directory # If source directories (DA_EXPDIR_SRC, DA_WORKDIR_SRC) are not set, # the experiment set-up folder will be copied from the same target directory. # I.e. DA_EXPDIR_SRC==DA_EXPDIR and DA_WORKDIR_SRC==DA_WORKDIR. export DA_EXPDIR_SRC = $( pwd ) /u-dales/examples export DA_WORKDIR_SRC = $( pwd ) /u-dales/examples If you set up a new experiment on HPC, also use: export DA_WORKDIR = $EPHEMERAL # Output top-level directory on HPC export DA_WORKDIR_SRC = $EPHEMERAL Now to set-up a new experiment (here we use case 009 ) based on a previous example (here we use case 001 ), run: # We assume you are running the following commands from your # top-level project directory. # General syntax: copy_inputs.sh new_exp_id old_exp_id # To set up a new simulation starting from the restart files of another simulation # (\"warmstart\"), use the 'w' flag. E.g.: copy_inputs.sh new_exp_id old_exp_id w ./u-dales/tools/copy_inputs.sh 009 001","title":"Set-up"},{"location":"udales-getting-started/#run","text":"The scripts local_execute.sh and hpc_execute.sh in u-dales/tools are used as wrappers to run simulations on your local machine and HPC at ICL respectively. These scripts contain several helpers to run the simulations and merge outputs from several CPUs into a single file (see Post-processing for more info about the individual scripts). The scripts require several variables to be set up. Below is an example setup for copying and pasting. You can also specify these parameters in a config.sh file within the experiment directory, which is then read by the scripts. Note that you need to choose the number of CPUs you are using to run the simulation such that the number of grid cells in the y-direction ( jtot parameter in the namoptions input file) is a multiple of the number of CPUs.","title":"Run"},{"location":"udales-getting-started/#run-on-common-systems","text":"# We assume you are running the following commands from your # top-level project directory. export DA_TOOLSDIR = $( pwd ) /u-dales/tools # Directory of scripts export DA_BUILD = $( pwd ) /u-dales/build/release/u-dales # Build file export NCPU = 2 # Number of CPUs to use for a simulation export DA_WORKDIR = $( pwd ) /outputs # Output top-level directory Then, to start the simulation, run: # We assume you are running the following commands from your # top-level project directory. # General syntax: local_execute.sh exp_directory ./u-dales/tools/local_execute.sh experiments/009","title":"Run on common systems"},{"location":"udales-getting-started/#run-on-hpcs","text":"export DA_TOOLSDIR = $( pwd ) /u-dales/tools # Directory of scripts export DA_BUILD = $( pwd ) /u-dales/build/release/u-dales # Build file export NCPU = 2 # Number of CPUs to use for a simulation export NNODE = 1 # Number of nodes to use for a simulation export WALLTIME = \"00:30:00\" # Maximum runtime for simulation in hours:minutes:seconds export MEM = \"2gb\" # Memory request per node For guidance on how to set the parameters on HPC, have a look at Job sizing guidance . Then, to start the simulation, run: # We assume you are running the following commands from your # top-level project directory. # General syntax: hpc_execute.sh exp_directory ./u-dales/tools/hpc_execute.sh experiments/009","title":"Run on HPCs"},{"location":"udales-getting-started/#whats-next","text":"This simple guide is meant to allow you to get started based on an existing example. We set up several example simulations to get you started. To learn more about pre- and post-processing steps in uDALES, please see the pre-processing and post-processing pages.","title":"What's next?"},{"location":"udales-namoptions-overview/","text":"Namoptions overview \u00b6 This list refers to the original code-base DALES . The latest version of the namoptions overview of DALES is documented here . Namelist DOMAIN \u00b6 Name Default Possible values Description Unit imax 64 See itot in DALES . jtot 64 See DALES . kmax 96 See DALES . xsize -1 See DALES . ysize -1 See DALES . xlat 52. See DALES . xlon 0. See DALES . xday 1. See DALES . xtime 0. See DALES . ksp -1 See DALES . (Setting to -1 calculates default value) Namelist DYNAMICS \u00b6 Possible advection schemes: 1 = 1 st order upwind scheme 2 = 2 nd order central difference scheme 7 = Kappa (flux limited) scheme. This scheme designed for quantities that should never become negative. Name Default Possible values Description Unit lqlnr .false. See DALES . Default switched from .true. iadv_mom 2 2 Advection scheme for momentum. Also in DALES . - iadv_tke -1 2 Advection scheme for TKE. Only used if loneeqn = True . Also in DALES . - iadv_thl -1 2, 7 Advection scheme for temperature. Also in DALES . - iadv_qt -1 2 Advection scheme for moisture. Also in DALES . - iadv_sv -1 1, 2, 7 Advection scheme for scalars. Also in DALES . - ipoiss 1 0, 1 Poisson solver. 0 = Fast Fourier Transformation, 1 = Cyclic reduction scheme. Default will change to 0 in the future. - Namelist PHYSICS \u00b6 Name Default Possible values Description Unit ps -1 See DALES . lcoriol .false. .true., .false. See DALES . Default switched to .false. - igrw_damp 2 See DALES . lmoist .false. .true., .false. See DALES . Default switched to .false. - ltempeq .false. .true., .false. Switch for solving temperature equation. - lbuoyancy .false. .true., .false. Switch for buoyancy force in temperature equation. - lprofforc .false. .true., .false. Switch for nudging flow to a profile (forcing). - luoutflowr .false. switch that determines whether u-velocity is corrected to get a fixed outflow rate lvoutflowr .false. switch that determines whether u-velocity is corrected to get a fixed outflow rate luvolflowr .false. switch that determines whether u-velocity is corrected to get a fixed volume flow rate lvvolflowr .false. switch that determines whether u-velocity is corrected to get a fixed volume flow rate uflowrate 1. REAL U-velocity flow rate for out- or volume-flow forcing. m/s vflowrate 1. REAL V-velocity flow rate out- or volume-flow forcing. m/s ifixuinf 0 1, 2 Choice for free stream forcing. (0 = nothing) lvinf .false. use Vinf instead of Uinf for the fixed velocity at infinity tscale timescale: domain height*Uinf/utau**2 lnudge .false. switch for applying nudging at the top of the domain tnudge 50. time scale for nudging nnudge 10 dpdx 0. Constant pressure gradient forcing in x. Namelist RUN \u00b6 Name Default Possible values Description Unit iexpnr 0 See DALES . runtime 300 See DALES . dtmax 20 See DALES . lwarmstart .false. See DALES . lper2inout .false. .true., .false. Switch that determines type of restart: .true. means switching from periodic to in/outflow: inlet profile is read from prof.inp . Potentially deprecated. May be removed in the future. startfile '' See DALES . lstratstart .false. .true., .false. Description missing trestart 10000. See DALES . irandom 0 See DALES . krand See DALES . Setting no value will return kmax. randu 0. See DALES . Default changed from 0.5 randthl 0. See DALES . Default changed from 0.1 randqt 0. See DALES . Default changed from 1e-5. ladaptive .false. See DALES . courant -1 Default sets it to 1.5 or 1.1 (if Kappa or upwind scheme is used). These are different values than in DALES . diffnr 0.25 Diffusion number? Used to determine adaptive time step. author '' See DALES . lles .true. .true., .false. Switch that determines whether the subgrid model is turned on or constant ekm and ekh are used (DNS) - libm .true. Switch that determines whether the Immersed Boundary Method is turned on. Deprecated. Will be removed in the future. lreadmean .false. Switch that determines whether mean variables should be read from means#myid#.#expnr# Potentially deprecated. May be removed in the future. lwalldist .false. Switch that determines whether the wall distances should be computed for the subgrid models. Potentially deprecated. May be removed in the future. Namelist OUTPUT \u00b6 Name Default Possible values Description Unit lfielddump .false. .true., .false. Switch for instantaneous field output. - tfielddump 10000. Output time for fields. s fieldvars '' Any of the given labels, several are seperated by a comma: u0,v0,w0,th,ql,qt,p0,s1,s2,s3,s4,s5 Variable names of fields. - tsample 5. Sample time for statistics. s tstatsdump 10000. Output time for statistics. s ltdump .false. .true., .false. Switch to output time-averaged statistics. - lydump .false. .true., .false. Switch to output y-averaged statistics. - lytdump .false. .true., .false. Switch to output y- and time- averaged statistics. - lxydump .false. .true., .false. Switch to output x- and y- averaged statistics. - lxytdump .false. .true., .false. Switch to output x-, y- and time-averaged statistics. - lslicedump .false. .true., .false. Switch to output slices in the xy-plane. - ltkedump .false. .true., .false. Not supported in the current version. - Namelist NAMSUBGRID \u00b6 Name Default Possible values Description Unit lvreman .false. .true., .false. Switch for Vreman (2004) sub-grid scheme. - c_vreman 0.07 Model constant for Vreman scheme. lbuoycorr .false. .true., .false. Switch for buoyancy correlation in the Vreman scheme. - loneeqn .false. .true., .false. Switch for one-equation sub-grid scheme. - ldelta .false. See DALES . lmason .false. See DALES . cf 2.5 See DALES . cn 0.76 See DALES . Rigc 0.25 See DALES . Prandtl 0.333 See DALES . lsmagorinsky .false . See DALES . cs -1 See DALES . nmason 2 See DALES . Namelist NAMCHECKSIM \u00b6 Name Default Possible values Description Unit tcheck 0 See DALES . Namelist BC \u00b6 Switches for boundary conditions: momentum (m), temperature (T), humidity (q) and scalars (s). Lateral BCs (BCx, BCy): 1 = periodic, > 1 special in/outflow conditions BCs at the top (BCtop): 1 = freeslip, 2 = noslip, 3 = determined by inflow conditions BCs at the bottom (BCbot; only effective if not covered with road facets): 1 = flux, 2 = wall function Name Default Possible values Description Unit BCxm 1 Domain boundary condition for momentum in x. BCxT 1 Domain boundary condition for temperature in x. BCxq 1 Domain boundary condition for humidity in x. BCxs 1 Domain boundary condition for scalars in x. BCym 1 Domain boundary condition for momentum in y. BCyT 1 Domain boundary condition for temperature in y. BCyq 1 Domain boundary condition for humidity in y. BCys 1 Domain boundary condition for scalars in y. BCtopm 1 Boundary condition for momentum at domain top. BCtopT 1 Boundary condition for temperature at domain top. BCtopq 1 Boundary condition for humidity at domain top. BCtops 1 Boundary condition for scalars at domain top. BCbotm 2 Boundary condition for momentum at domain bottom. BCbotT 1 Boundary condition for temperature at domain bottom. BCbotq 1 Boundary condition for humidity at domain bottom. BCbots 1 Boundary condition for scalars at domain bottom. bctfxm 0. Bounary Condition Temperature Flux X-minus-wall. bctfxp 0. Bounary Condition Temperature Flux X-plus-wall. bctfym 0. Bounary Condition Temperature Flux Y-minus-wall. bctfyp 0. Bounary Condition Temperature Flux y-plus-wall. bctfz 0. Bounary Condition Temperature Flux z top-wall. thl_top -1. Temperature at the top boundary. qt_top -1. Humidity at the top boundary. wttop 0. Temperature flux at the top boundary. qts -1. Used in modthermodynamics to get a BC for the moisture profile. wsvsurfdum Scalar boundary conditions bottom. wsvtopdum Scalar boundary conditions top. wtsurf -1. See DALES . Currently need to be set to reasonable values for subroutine bottom. wqsurf -1. See DALES . Currently need to be set to reasonable values for subroutine bottom. thls -1. See DALES . Currently need to be set to reasonable values for subroutine bottom. z0 -1. See DALES . Currently need to be set to reasonable values for subroutine bottom. z0h -1. Facet roughness length for heat. Currently need to be set to reasonable values for subroutine bottom. Namelist ENERGYBALANCE \u00b6 Name Default Possible values Description Unit lEB .false. .true., .false. Switch for using the facet energy balance. - lwriteEBfiles .false. .true., .false. Switch for writing facet temperatures and energy budget to file. - lconstW .false. .true., .false. Switch whether soil moisture is assumed as constant in time (.true.) or the evaporated water is from the soil (.false.). - dtEB 10. REAL Time interval between calculations of facet energy balance. s bldT 0. REAL Internal temperature of the buildings, currently also ground temperature at a depth equal to floor facet thickness. K wsoil 0. REAL Water content of soil. kg/m3 wgrmax 450. REAL Maximum water content. kg/m3 wwilt 171. REAL Water content at wilting point. kg/m3 wfc 313. REAL Water content at field capacity. kg/m3 skyLW 0. REAL Long-wave radiation from the sky. GRLAI 2. REAL Leaf area index of a green roof. rsmin 110. REAL Minimum resistance of soil/plant. nwalllayers 3 INTEGER Number of layers making up each facet. Namelist WALLS \u00b6 1 = fixed flux 2 = flux determined by wall function involving temperature 3 = flux determined by neutral wall function (set automatically if ltempeq = .false. ) Name Default Possible values Description Unit nblocks 0 INTEGER Number of blocks specified in blocks.inp . - nfcts -1 INTEGER Number of facets specified in facets.inp . - iwallmom 2 2, 3 (1 currently not implemented) Building wall momentum flux. - iwalltemp 1 1, 2 Building wall temperature flux. - iwallmoist 1 1, 2 Building wall moisture flux. - iwallscal 1 1, 2 Building wall scalar flux - Namelist SCALARS \u00b6 Name Default Possible values Description Unit nsv 0 See DALES . lreadscal .false. .true., .false. Switch for reading scalar pollutant field (warm start). Deprecated, will be removed in the future. - lscasrc .false. .true., .false. Description missing lscasrcl .false. .true., .false. Description missing xS 0 yS 0 zS 0 SS 0. sigS 0. Namelist DRIVER \u00b6 Name Default Possible values Description Unit idriver 0 0, 1, 2 Options for running precursor driver simulations where *driver* files will be written ( = 1 ) and reading a completed driver simulation as the inlet to a simulation ( = 2 ). Default ( = 0 ) will do neither. - tdriverstart 0. REAL Time at which *driver* files start being written. In use for idriver = 1 . s dtdriver 0. REAL Timestep at which *driver* file planes are written. In use for idriver = 1 . s iplane - INTEGER Index of the position on the x-axis of the plane that will be written to *driver* files. In use for idriver = 1 . driverstore 0. INTEGER Number of timesteps ( idriver = 1 ) to be written to *driver* files or ( idriver = 2 ) contained in *driver* files to be read. - driverjobnr - - Job number of the *driver* files to be read. These files should be copied into the experiments folder of the driven simulation. In use for idriver = 2 . - Namelist CHEMISTRY \u00b6 This section will be updated with the next version. Name Default Possible values Description Unit lchem .false. .true., .false. Switch for basic chemistry. - k1 0. Rate constant (O3 + NO -> NO2 + 02 ). Chemistry model parameter. JNO2 0. NO2 photolysis rate. Chemistry model parameter. Namelist INLET \u00b6 This section will be updated with the next version. Name Default Possible values Description Unit Uinf 0. Vinf 0. inletav 0. lstoreplane .false. linletRA .false. lfixinlet .false. lfixutauin .false. lreadminl .false. di 0.09 dti lwallfunc .true. Switch that determines whether wall functions are used to compute the wall-shear stress. Deprecated, only in use in modinlet. Will be removed in the future.","title":"Configuration"},{"location":"udales-namoptions-overview/#namoptions-overview","text":"This list refers to the original code-base DALES . The latest version of the namoptions overview of DALES is documented here .","title":"Namoptions overview"},{"location":"udales-namoptions-overview/#namelist-domain","text":"Name Default Possible values Description Unit imax 64 See itot in DALES . jtot 64 See DALES . kmax 96 See DALES . xsize -1 See DALES . ysize -1 See DALES . xlat 52. See DALES . xlon 0. See DALES . xday 1. See DALES . xtime 0. See DALES . ksp -1 See DALES . (Setting to -1 calculates default value)","title":"Namelist DOMAIN"},{"location":"udales-namoptions-overview/#namelist-dynamics","text":"Possible advection schemes: 1 = 1 st order upwind scheme 2 = 2 nd order central difference scheme 7 = Kappa (flux limited) scheme. This scheme designed for quantities that should never become negative. Name Default Possible values Description Unit lqlnr .false. See DALES . Default switched from .true. iadv_mom 2 2 Advection scheme for momentum. Also in DALES . - iadv_tke -1 2 Advection scheme for TKE. Only used if loneeqn = True . Also in DALES . - iadv_thl -1 2, 7 Advection scheme for temperature. Also in DALES . - iadv_qt -1 2 Advection scheme for moisture. Also in DALES . - iadv_sv -1 1, 2, 7 Advection scheme for scalars. Also in DALES . - ipoiss 1 0, 1 Poisson solver. 0 = Fast Fourier Transformation, 1 = Cyclic reduction scheme. Default will change to 0 in the future. -","title":"Namelist DYNAMICS"},{"location":"udales-namoptions-overview/#namelist-physics","text":"Name Default Possible values Description Unit ps -1 See DALES . lcoriol .false. .true., .false. See DALES . Default switched to .false. - igrw_damp 2 See DALES . lmoist .false. .true., .false. See DALES . Default switched to .false. - ltempeq .false. .true., .false. Switch for solving temperature equation. - lbuoyancy .false. .true., .false. Switch for buoyancy force in temperature equation. - lprofforc .false. .true., .false. Switch for nudging flow to a profile (forcing). - luoutflowr .false. switch that determines whether u-velocity is corrected to get a fixed outflow rate lvoutflowr .false. switch that determines whether u-velocity is corrected to get a fixed outflow rate luvolflowr .false. switch that determines whether u-velocity is corrected to get a fixed volume flow rate lvvolflowr .false. switch that determines whether u-velocity is corrected to get a fixed volume flow rate uflowrate 1. REAL U-velocity flow rate for out- or volume-flow forcing. m/s vflowrate 1. REAL V-velocity flow rate out- or volume-flow forcing. m/s ifixuinf 0 1, 2 Choice for free stream forcing. (0 = nothing) lvinf .false. use Vinf instead of Uinf for the fixed velocity at infinity tscale timescale: domain height*Uinf/utau**2 lnudge .false. switch for applying nudging at the top of the domain tnudge 50. time scale for nudging nnudge 10 dpdx 0. Constant pressure gradient forcing in x.","title":"Namelist PHYSICS"},{"location":"udales-namoptions-overview/#namelist-run","text":"Name Default Possible values Description Unit iexpnr 0 See DALES . runtime 300 See DALES . dtmax 20 See DALES . lwarmstart .false. See DALES . lper2inout .false. .true., .false. Switch that determines type of restart: .true. means switching from periodic to in/outflow: inlet profile is read from prof.inp . Potentially deprecated. May be removed in the future. startfile '' See DALES . lstratstart .false. .true., .false. Description missing trestart 10000. See DALES . irandom 0 See DALES . krand See DALES . Setting no value will return kmax. randu 0. See DALES . Default changed from 0.5 randthl 0. See DALES . Default changed from 0.1 randqt 0. See DALES . Default changed from 1e-5. ladaptive .false. See DALES . courant -1 Default sets it to 1.5 or 1.1 (if Kappa or upwind scheme is used). These are different values than in DALES . diffnr 0.25 Diffusion number? Used to determine adaptive time step. author '' See DALES . lles .true. .true., .false. Switch that determines whether the subgrid model is turned on or constant ekm and ekh are used (DNS) - libm .true. Switch that determines whether the Immersed Boundary Method is turned on. Deprecated. Will be removed in the future. lreadmean .false. Switch that determines whether mean variables should be read from means#myid#.#expnr# Potentially deprecated. May be removed in the future. lwalldist .false. Switch that determines whether the wall distances should be computed for the subgrid models. Potentially deprecated. May be removed in the future.","title":"Namelist RUN"},{"location":"udales-namoptions-overview/#namelist-output","text":"Name Default Possible values Description Unit lfielddump .false. .true., .false. Switch for instantaneous field output. - tfielddump 10000. Output time for fields. s fieldvars '' Any of the given labels, several are seperated by a comma: u0,v0,w0,th,ql,qt,p0,s1,s2,s3,s4,s5 Variable names of fields. - tsample 5. Sample time for statistics. s tstatsdump 10000. Output time for statistics. s ltdump .false. .true., .false. Switch to output time-averaged statistics. - lydump .false. .true., .false. Switch to output y-averaged statistics. - lytdump .false. .true., .false. Switch to output y- and time- averaged statistics. - lxydump .false. .true., .false. Switch to output x- and y- averaged statistics. - lxytdump .false. .true., .false. Switch to output x-, y- and time-averaged statistics. - lslicedump .false. .true., .false. Switch to output slices in the xy-plane. - ltkedump .false. .true., .false. Not supported in the current version. -","title":"Namelist OUTPUT"},{"location":"udales-namoptions-overview/#namelist-namsubgrid","text":"Name Default Possible values Description Unit lvreman .false. .true., .false. Switch for Vreman (2004) sub-grid scheme. - c_vreman 0.07 Model constant for Vreman scheme. lbuoycorr .false. .true., .false. Switch for buoyancy correlation in the Vreman scheme. - loneeqn .false. .true., .false. Switch for one-equation sub-grid scheme. - ldelta .false. See DALES . lmason .false. See DALES . cf 2.5 See DALES . cn 0.76 See DALES . Rigc 0.25 See DALES . Prandtl 0.333 See DALES . lsmagorinsky .false . See DALES . cs -1 See DALES . nmason 2 See DALES .","title":"Namelist NAMSUBGRID"},{"location":"udales-namoptions-overview/#namelist-namchecksim","text":"Name Default Possible values Description Unit tcheck 0 See DALES .","title":"Namelist NAMCHECKSIM"},{"location":"udales-namoptions-overview/#namelist-bc","text":"Switches for boundary conditions: momentum (m), temperature (T), humidity (q) and scalars (s). Lateral BCs (BCx, BCy): 1 = periodic, > 1 special in/outflow conditions BCs at the top (BCtop): 1 = freeslip, 2 = noslip, 3 = determined by inflow conditions BCs at the bottom (BCbot; only effective if not covered with road facets): 1 = flux, 2 = wall function Name Default Possible values Description Unit BCxm 1 Domain boundary condition for momentum in x. BCxT 1 Domain boundary condition for temperature in x. BCxq 1 Domain boundary condition for humidity in x. BCxs 1 Domain boundary condition for scalars in x. BCym 1 Domain boundary condition for momentum in y. BCyT 1 Domain boundary condition for temperature in y. BCyq 1 Domain boundary condition for humidity in y. BCys 1 Domain boundary condition for scalars in y. BCtopm 1 Boundary condition for momentum at domain top. BCtopT 1 Boundary condition for temperature at domain top. BCtopq 1 Boundary condition for humidity at domain top. BCtops 1 Boundary condition for scalars at domain top. BCbotm 2 Boundary condition for momentum at domain bottom. BCbotT 1 Boundary condition for temperature at domain bottom. BCbotq 1 Boundary condition for humidity at domain bottom. BCbots 1 Boundary condition for scalars at domain bottom. bctfxm 0. Bounary Condition Temperature Flux X-minus-wall. bctfxp 0. Bounary Condition Temperature Flux X-plus-wall. bctfym 0. Bounary Condition Temperature Flux Y-minus-wall. bctfyp 0. Bounary Condition Temperature Flux y-plus-wall. bctfz 0. Bounary Condition Temperature Flux z top-wall. thl_top -1. Temperature at the top boundary. qt_top -1. Humidity at the top boundary. wttop 0. Temperature flux at the top boundary. qts -1. Used in modthermodynamics to get a BC for the moisture profile. wsvsurfdum Scalar boundary conditions bottom. wsvtopdum Scalar boundary conditions top. wtsurf -1. See DALES . Currently need to be set to reasonable values for subroutine bottom. wqsurf -1. See DALES . Currently need to be set to reasonable values for subroutine bottom. thls -1. See DALES . Currently need to be set to reasonable values for subroutine bottom. z0 -1. See DALES . Currently need to be set to reasonable values for subroutine bottom. z0h -1. Facet roughness length for heat. Currently need to be set to reasonable values for subroutine bottom.","title":"Namelist BC"},{"location":"udales-namoptions-overview/#namelist-energybalance","text":"Name Default Possible values Description Unit lEB .false. .true., .false. Switch for using the facet energy balance. - lwriteEBfiles .false. .true., .false. Switch for writing facet temperatures and energy budget to file. - lconstW .false. .true., .false. Switch whether soil moisture is assumed as constant in time (.true.) or the evaporated water is from the soil (.false.). - dtEB 10. REAL Time interval between calculations of facet energy balance. s bldT 0. REAL Internal temperature of the buildings, currently also ground temperature at a depth equal to floor facet thickness. K wsoil 0. REAL Water content of soil. kg/m3 wgrmax 450. REAL Maximum water content. kg/m3 wwilt 171. REAL Water content at wilting point. kg/m3 wfc 313. REAL Water content at field capacity. kg/m3 skyLW 0. REAL Long-wave radiation from the sky. GRLAI 2. REAL Leaf area index of a green roof. rsmin 110. REAL Minimum resistance of soil/plant. nwalllayers 3 INTEGER Number of layers making up each facet.","title":"Namelist ENERGYBALANCE"},{"location":"udales-namoptions-overview/#namelist-walls","text":"1 = fixed flux 2 = flux determined by wall function involving temperature 3 = flux determined by neutral wall function (set automatically if ltempeq = .false. ) Name Default Possible values Description Unit nblocks 0 INTEGER Number of blocks specified in blocks.inp . - nfcts -1 INTEGER Number of facets specified in facets.inp . - iwallmom 2 2, 3 (1 currently not implemented) Building wall momentum flux. - iwalltemp 1 1, 2 Building wall temperature flux. - iwallmoist 1 1, 2 Building wall moisture flux. - iwallscal 1 1, 2 Building wall scalar flux -","title":"Namelist WALLS"},{"location":"udales-namoptions-overview/#namelist-scalars","text":"Name Default Possible values Description Unit nsv 0 See DALES . lreadscal .false. .true., .false. Switch for reading scalar pollutant field (warm start). Deprecated, will be removed in the future. - lscasrc .false. .true., .false. Description missing lscasrcl .false. .true., .false. Description missing xS 0 yS 0 zS 0 SS 0. sigS 0.","title":"Namelist SCALARS"},{"location":"udales-namoptions-overview/#namelist-driver","text":"Name Default Possible values Description Unit idriver 0 0, 1, 2 Options for running precursor driver simulations where *driver* files will be written ( = 1 ) and reading a completed driver simulation as the inlet to a simulation ( = 2 ). Default ( = 0 ) will do neither. - tdriverstart 0. REAL Time at which *driver* files start being written. In use for idriver = 1 . s dtdriver 0. REAL Timestep at which *driver* file planes are written. In use for idriver = 1 . s iplane - INTEGER Index of the position on the x-axis of the plane that will be written to *driver* files. In use for idriver = 1 . driverstore 0. INTEGER Number of timesteps ( idriver = 1 ) to be written to *driver* files or ( idriver = 2 ) contained in *driver* files to be read. - driverjobnr - - Job number of the *driver* files to be read. These files should be copied into the experiments folder of the driven simulation. In use for idriver = 2 . -","title":"Namelist DRIVER"},{"location":"udales-namoptions-overview/#namelist-chemistry","text":"This section will be updated with the next version. Name Default Possible values Description Unit lchem .false. .true., .false. Switch for basic chemistry. - k1 0. Rate constant (O3 + NO -> NO2 + 02 ). Chemistry model parameter. JNO2 0. NO2 photolysis rate. Chemistry model parameter.","title":"Namelist CHEMISTRY"},{"location":"udales-namoptions-overview/#namelist-inlet","text":"This section will be updated with the next version. Name Default Possible values Description Unit Uinf 0. Vinf 0. inletav 0. lstoreplane .false. linletRA .false. lfixinlet .false. lfixutauin .false. lreadminl .false. di 0.09 dti lwallfunc .true. Switch that determines whether wall functions are used to compute the wall-shear stress. Deprecated, only in use in modinlet. Will be removed in the future.","title":"Namelist INLET"},{"location":"udales-post-processing/","text":"Post-processing \u00b6 uDALES saves the outputs as NetCDF files. If a simulation is run on several processors, each processor writes independent output files. The script nco_concatenate_field.sh in the tools directory can be used to gather these output files into a single file. The wrapper script gather_outputs.sh does this automatically for all output fields of the simulation. The script is automatically called after a simulation run when using local_execute.sh or hpc_execute.sh for executing your simulation. If you have separate output files of a continuous simulation, e.g. because one simulation is the warmstart of the other simulation, you can append these output files into a single file using the script append_outputs.sh . Gather output fields \u00b6 To gather the output files of serveral processors from your simulation to a single file, use: # We assume you are running the following commands from your # top-level project directory. # General syntax: gather_outputs.sh <path-to-exp-outputs> ./u-dales/tools/gather_outputs.sh outputs/009 Replace 009 with the number of your simulation. Append two output files \u00b6 We assume that simulation 1 was run before simulation 2, i.e. the time steps of simulation 1 are all before simulation 2. To append the output files of simulation 1 (009) to simulation 2 (010), use: # We assume you are running the following commands from your # top-level project directory. # General syntax: append_outputs.sh <path-to-simulation-1-outputs> <path-to-simulation-2-outputs> ./u-dales/tools/append_outputs.sh outputs/009 outputs/010 Replace 009 and 010 with the numbers of your simulations. Different output files explained \u00b6 The output files generated depend on the parameters specified under &OUPUT in the namoptions file of your simulation (see Configuration for details), and the name of the output file(s) matches the name of that switch, e.g. if lxytdump is selected for experiment 009 then there will be an output file called xytdump.009.nc . If lfielddump is selected, note that there will be a fielddump.xxx.009.nc file for each cpu. Reading output files \u00b6 These output files are in netcdf format, and so it is possible to obtain a description of any particular file using the command ncdisp('<top-level-directory>/outputs/009/xytdump.009.nc') in Matlab. To read a variable, one can use e.g. u = ncread(<top-level-directory>/outputs/009/xytdump.009.nc', 'uxyt')","title":"Post-processing"},{"location":"udales-post-processing/#post-processing","text":"uDALES saves the outputs as NetCDF files. If a simulation is run on several processors, each processor writes independent output files. The script nco_concatenate_field.sh in the tools directory can be used to gather these output files into a single file. The wrapper script gather_outputs.sh does this automatically for all output fields of the simulation. The script is automatically called after a simulation run when using local_execute.sh or hpc_execute.sh for executing your simulation. If you have separate output files of a continuous simulation, e.g. because one simulation is the warmstart of the other simulation, you can append these output files into a single file using the script append_outputs.sh .","title":"Post-processing"},{"location":"udales-post-processing/#gather-output-fields","text":"To gather the output files of serveral processors from your simulation to a single file, use: # We assume you are running the following commands from your # top-level project directory. # General syntax: gather_outputs.sh <path-to-exp-outputs> ./u-dales/tools/gather_outputs.sh outputs/009 Replace 009 with the number of your simulation.","title":"Gather output fields"},{"location":"udales-post-processing/#append-two-output-files","text":"We assume that simulation 1 was run before simulation 2, i.e. the time steps of simulation 1 are all before simulation 2. To append the output files of simulation 1 (009) to simulation 2 (010), use: # We assume you are running the following commands from your # top-level project directory. # General syntax: append_outputs.sh <path-to-simulation-1-outputs> <path-to-simulation-2-outputs> ./u-dales/tools/append_outputs.sh outputs/009 outputs/010 Replace 009 and 010 with the numbers of your simulations.","title":"Append two output files"},{"location":"udales-post-processing/#different-output-files-explained","text":"The output files generated depend on the parameters specified under &OUPUT in the namoptions file of your simulation (see Configuration for details), and the name of the output file(s) matches the name of that switch, e.g. if lxytdump is selected for experiment 009 then there will be an output file called xytdump.009.nc . If lfielddump is selected, note that there will be a fielddump.xxx.009.nc file for each cpu.","title":"Different output files explained"},{"location":"udales-post-processing/#reading-output-files","text":"These output files are in netcdf format, and so it is possible to obtain a description of any particular file using the command ncdisp('<top-level-directory>/outputs/009/xytdump.009.nc') in Matlab. To read a variable, one can use e.g. u = ncread(<top-level-directory>/outputs/009/xytdump.009.nc', 'uxyt')","title":"Reading output files"},{"location":"udales-pre-processing/","text":"Pre-processing \u00b6 This guide explains how to set up the input files of your simulation. The idea is that you already have a simulation set up, and now you want to modify some of the parameters of your simulation. If you do not have a simulation yet, have a look at the set-up section in our getting started guide. The parameters of the simulation are set in the namoptions file of your experiment. Some parameter changes require the additional input files to be re-written, which will be done automatically by the pre-processing. The next section provides an overview of these parameters. Pre-processing parameters \u00b6 Some parameters used by uDALES are also used in the pre-processing. They are the following: &DOMAIN \u00b6 imax : number of cells in x-direction. Default: 64. jtot : number of cells in y-direction. Default: 64. kmax : number of cells in z-direction. Default: 96. xsize : domain size in x-direction (metres). ysize : domain size in y-direction (metres). &WALLS \u00b6 nblocks : number of blocks. The value is generated by the pre-processing routines, so if this parameter is omitted, write_inputs.sh (see below) will write it and its value. If it given, write_inputs.sh will overwrite the value. nfcts : number of facets. The value is generated by the pre-processing routines, so if this parameter is omitted, write_inputs.sh (see below) will write it and its value. If it given, write_inputs.sh will overwrite the value. &PHYSICS \u00b6 luoutflowr : switch that determines whether u-velocity is corrected to get a fixed outflow rate Default: false. lvoutflowr : switch that determines whether v-velocity is corrected to get a fixed outflow rate. Default: false. luvolflowr : switch that determines whether u-velocity is corrected to get a fixed volume flow rate. Default: false. lvvolflowr : switch that determines whether v-velocity is corrected to get a fixed volume flow rate. Default: false. lcoriol : switch for coriolis force. Default: false. lprofforc : switch for nudging flow to a profile. Default: false. Note only one forcing should be specified, i.e. one of luoutflowr / lvoutflowr , luvolflowr / lvvolflowr , lprofforc , or lcoriol . &ENERGYBALANCE \u00b6 lEB : switch for energy balance. Default: false. &CHEMISTRY \u00b6 lchem : switch for chemistry. &SCALARS \u00b6 nsv : number of scalar variables. Default: 0. Note that nsv > 0 is not yet supported in the pre-processing. &INPS \u00b6 The parameters under the &INPS header are used only in the pre-processing. zsize : size of domain in z direction (metres). maxsize : maximum size of facets (metres or cells?). Default: 10 if using energy balance, infinity otherwise. lzstretch : switch for stretched z grid. Default: false. lstretchexp : switch for z grid stretched using exp function. Default: false. lstretchtanh : switch for z grid stretched using tanh function. Default: false. lstretch2tanh : switch for z grid stretched using 2tanh function. Default: false. stretchconst : stretch constant. Default: 0.01. u0 : initial u-velocity (m/s). Also applied as geostrophic term where applicable. Default: 0. v0 : initial v-velocity (m/s). Also applied as geostrophic term where applicable. Default: 0. dpdx : pressure gradient in x direction (Pa/m). Default: 0. dpdy : pressure gradient in y direction (Pa/m). Default: 0. thl0 : temperature at z = 0. Default: 288. facT : facet temperature, or if lEB = .true. then initial facet temperature. Default: 288. qt0 : specific humidity at z = 0. Default: 0. lapse : lapse rate (K/m). Default: 0. w_s : subsidence. Default: 0. R : radiative forcing (W/m^2). Default: 0. NOb : initial concentration of NO. Default: 0. NO2b : initial concentration of NO2b. Default: 0. O3b : initial concentration of O3b. Default: 0. If using the energy balance, the following parameters can also be specified. solaz : solar azimuth (degrees). Default: 135. Z : solar zenith (degrees). Default: 28.4066. I : direct solar radiation (W/m^2). Default: 184.8775. Dsk : diffuse incoming radiation (W/m^2). Default: 418.8041. The following parameters relate to generating blocks.inp . Only one of the following three methods should be used. Generate blocks from a given file \u00b6 lblocksfile : switch for generating blocks from a given file. blocksfile : name of blocks file (must be specified if lblocksfile is used). ltxtblocks : switch for generating blocks from a 2D ascii array txtblocksfile : name of blocks file (must be specified if ltxtblocks is used). Generate blocks from LIDAR data \u00b6 llidar : switch for generating blocks from LIDAR data. Default: false. sourcename : name of image file. dxinp : resolution of image in x direction (metres per pixel). Default: 1. dyinp : resolution of image in y direction (metres per pixel). Default: 1. centeri : center of area of interest in image (horizontal pixel). Default: 0. centerj : center of area of interest in image (vertical pixel). Default: 0. maxh : maximum height of buildings in image (metres). Default: 0. pad : padding (metres). Default: 5. smallarea : objects smaller than this area (metres) will be deleted. Default: round(150 / (dx * dy)), where dx = xsize / imax and dy = ysize / jtot. Generate simple block geometry \u00b6 lflat : switch for no blocks. Default: false. lcube : switch for linear cubes. Default: false. lstaggered : switch for staggered cubes. Default: false. lcanyons : switch for inifite canyons. Default: false. lfloors : switch for just floor facets. Default: false. blockheight : height of blocks (cells). Default: 16. blockwidth : width of blocks (cells). Default: 16. canyonwidth : width of canyon (cells). Default: 16. Run \u00b6 The write_inputs.sh shell script is a wrapper around the MATALB pre-processing functions of preprocessing.m . For more info about the functions see Developer's guide . The script requires several variables to be set up. Below is an example setup for copying and pasting. You can also specify these parameters in a config.sh file within the experiment directory, which is then read by the scripts. # We assume you are running the following commands from your # top-level project directory. export DA_TOOLSDIR = $( pwd ) /u-dales/tools # Directory of the scripts export DA_EXPDIR = $( pwd ) /experiments # The top-level directory of the simulation setups Then, to start the pre-processing, run: # We assume you are running the following commands from your # top-level project directory. # General syntax: write_inputs.sh exp_id ./u-dales/tools/write_inputs.sh 009 Replace 009 with the number of your simulation. Developer's guide \u00b6 The u-dales/tools/preprocessing.m matlab class contains the functionality for preprocessing. The constructor reads the parameters in namoptions and stores them as member variables, and defines default variables for those not specified. These are then used in the member functions. In these member functions, additional data structures are also stored as member variables, including those used repeatedly and those eventually written to files, so that one can easily view and manipulate them using the matlab IDE. The u-dales/tools/write_inputs.m matlab script calls member functions of preprocessing.m in order to write the necessary input files for uDALES. It is intended to be as short and readable as possible, with the goal being that a developer can edit for a particular purpose, perhaps by calling a member function they have added to preprocessing.m . It will work simply as a normal script using the matlab IDE, but when doing this, ensure that DA_EXPDIR = <top level directory>/experiments/ and DA_TOOLSDIR = <top level directory>/u-dales/tools/ are defined. The u-dales/tools/write_inputs.sh shell script acts as a wrapper around write_inputs.m . Before running the matlab script, it will run the shell script config.sh located in the experiment directory, which defines environmental variables DA_EXPDIR and DA_TOOLSDIR . After running the script, it will also write the correct number of blocks and facets to namoptions . It is intended to be run from the top level project directory. # We assume you are running the following commands from your # top-level project directory. # General syntax: write_inputs.sh exp_id ./u-dales/tools/write_inputs.sh 009 Input files \u00b6 uDALES requires a number of input files, all suffixed by the experiment number, which is omitted in the following documentation. The namoptions.inp file contains a list of parameters for uDALES and the pre-processing routines, and the pre-processing is intended to run using solely this file (with some exceptions). The input files are: xgrid.inp : list of x grid values zgrid.inp : list of z grid values. prof.inp : initial profiles of flow variables (described in DALES documentation). lscale.inp : large-scale forcings (described in DALES documentation). blocks.inp : block position and corresponding facets (described below). facets.inp : facet orientation and corresponding block (described below). Tfacinit.inp : list of initial facet temperatures. walltypes.inp : a description of the properties of different types of facet (described below). This is copied to the experiment directory automatically. If using scalars, scalar.inp is also required to specifiy the initial scalar profiles. When using the energy balance, the following additional files are required: facetarea.inp : list of the areas of facets. vf.nc.inp : view factors of facets (stored as a netcdf file). svf.inp : list of the sky view factors of facets. netsw.inp : list of net shortwave radiation on facets. Structure of blocks.inp \u00b6 Each row describes a block, with the first 6 columns giving the lower (l) and upper (u) limit in each direction (i,j,k), in the order: il, iu, jl, ju, kl, ku. The next 5 columns give the facets that make up the faces of the block, in the order: top, west, east, north, south. (Note east is assumed to be aligned with the i-direction). Structure of facets.inp \u00b6 Each row describes a facet, with columns giving the orientation, wall type id, block id, and building id. Structure of walltypes.inp \u00b6 Each row describes a wall type, with the first 6 columns being: wall type id, a boolean for whether it is a 'green' facet or not, momentum roughness length, heat roughness length, albedo, and emissivity. Assuming that each facet is composed of 3 layers, the next 3 columns give the thickness of each, the next 3 give the volumetric heat capacity, the next 3 give the heat conductivity, and the final 4 give the thermal diffusivity at each interface between the layers. For examples, please refer to the example simulations . Visualising geometries \u00b6 There are a number of functions in the preprocessing class that can be called from the Matlab editor in order to visualise the geometry. Assuming the instance of the preprocessing class is named r , plot_bl(r) plots the buildings, plot_blocks(r) plots the buildings and the roads, and plot_facets(r) plots all the facets.","title":"Pre-processing"},{"location":"udales-pre-processing/#pre-processing","text":"This guide explains how to set up the input files of your simulation. The idea is that you already have a simulation set up, and now you want to modify some of the parameters of your simulation. If you do not have a simulation yet, have a look at the set-up section in our getting started guide. The parameters of the simulation are set in the namoptions file of your experiment. Some parameter changes require the additional input files to be re-written, which will be done automatically by the pre-processing. The next section provides an overview of these parameters.","title":"Pre-processing"},{"location":"udales-pre-processing/#pre-processing-parameters","text":"Some parameters used by uDALES are also used in the pre-processing. They are the following:","title":"Pre-processing parameters"},{"location":"udales-pre-processing/#domain","text":"imax : number of cells in x-direction. Default: 64. jtot : number of cells in y-direction. Default: 64. kmax : number of cells in z-direction. Default: 96. xsize : domain size in x-direction (metres). ysize : domain size in y-direction (metres).","title":"&amp;DOMAIN"},{"location":"udales-pre-processing/#walls","text":"nblocks : number of blocks. The value is generated by the pre-processing routines, so if this parameter is omitted, write_inputs.sh (see below) will write it and its value. If it given, write_inputs.sh will overwrite the value. nfcts : number of facets. The value is generated by the pre-processing routines, so if this parameter is omitted, write_inputs.sh (see below) will write it and its value. If it given, write_inputs.sh will overwrite the value.","title":"&amp;WALLS"},{"location":"udales-pre-processing/#physics","text":"luoutflowr : switch that determines whether u-velocity is corrected to get a fixed outflow rate Default: false. lvoutflowr : switch that determines whether v-velocity is corrected to get a fixed outflow rate. Default: false. luvolflowr : switch that determines whether u-velocity is corrected to get a fixed volume flow rate. Default: false. lvvolflowr : switch that determines whether v-velocity is corrected to get a fixed volume flow rate. Default: false. lcoriol : switch for coriolis force. Default: false. lprofforc : switch for nudging flow to a profile. Default: false. Note only one forcing should be specified, i.e. one of luoutflowr / lvoutflowr , luvolflowr / lvvolflowr , lprofforc , or lcoriol .","title":"&amp;PHYSICS"},{"location":"udales-pre-processing/#energybalance","text":"lEB : switch for energy balance. Default: false.","title":"&amp;ENERGYBALANCE"},{"location":"udales-pre-processing/#chemistry","text":"lchem : switch for chemistry.","title":"&amp;CHEMISTRY"},{"location":"udales-pre-processing/#scalars","text":"nsv : number of scalar variables. Default: 0. Note that nsv > 0 is not yet supported in the pre-processing.","title":"&amp;SCALARS"},{"location":"udales-pre-processing/#inps","text":"The parameters under the &INPS header are used only in the pre-processing. zsize : size of domain in z direction (metres). maxsize : maximum size of facets (metres or cells?). Default: 10 if using energy balance, infinity otherwise. lzstretch : switch for stretched z grid. Default: false. lstretchexp : switch for z grid stretched using exp function. Default: false. lstretchtanh : switch for z grid stretched using tanh function. Default: false. lstretch2tanh : switch for z grid stretched using 2tanh function. Default: false. stretchconst : stretch constant. Default: 0.01. u0 : initial u-velocity (m/s). Also applied as geostrophic term where applicable. Default: 0. v0 : initial v-velocity (m/s). Also applied as geostrophic term where applicable. Default: 0. dpdx : pressure gradient in x direction (Pa/m). Default: 0. dpdy : pressure gradient in y direction (Pa/m). Default: 0. thl0 : temperature at z = 0. Default: 288. facT : facet temperature, or if lEB = .true. then initial facet temperature. Default: 288. qt0 : specific humidity at z = 0. Default: 0. lapse : lapse rate (K/m). Default: 0. w_s : subsidence. Default: 0. R : radiative forcing (W/m^2). Default: 0. NOb : initial concentration of NO. Default: 0. NO2b : initial concentration of NO2b. Default: 0. O3b : initial concentration of O3b. Default: 0. If using the energy balance, the following parameters can also be specified. solaz : solar azimuth (degrees). Default: 135. Z : solar zenith (degrees). Default: 28.4066. I : direct solar radiation (W/m^2). Default: 184.8775. Dsk : diffuse incoming radiation (W/m^2). Default: 418.8041. The following parameters relate to generating blocks.inp . Only one of the following three methods should be used.","title":"&amp;INPS"},{"location":"udales-pre-processing/#generate-blocks-from-a-given-file","text":"lblocksfile : switch for generating blocks from a given file. blocksfile : name of blocks file (must be specified if lblocksfile is used). ltxtblocks : switch for generating blocks from a 2D ascii array txtblocksfile : name of blocks file (must be specified if ltxtblocks is used).","title":"Generate blocks from a given file"},{"location":"udales-pre-processing/#generate-blocks-from-lidar-data","text":"llidar : switch for generating blocks from LIDAR data. Default: false. sourcename : name of image file. dxinp : resolution of image in x direction (metres per pixel). Default: 1. dyinp : resolution of image in y direction (metres per pixel). Default: 1. centeri : center of area of interest in image (horizontal pixel). Default: 0. centerj : center of area of interest in image (vertical pixel). Default: 0. maxh : maximum height of buildings in image (metres). Default: 0. pad : padding (metres). Default: 5. smallarea : objects smaller than this area (metres) will be deleted. Default: round(150 / (dx * dy)), where dx = xsize / imax and dy = ysize / jtot.","title":"Generate blocks from LIDAR data"},{"location":"udales-pre-processing/#generate-simple-block-geometry","text":"lflat : switch for no blocks. Default: false. lcube : switch for linear cubes. Default: false. lstaggered : switch for staggered cubes. Default: false. lcanyons : switch for inifite canyons. Default: false. lfloors : switch for just floor facets. Default: false. blockheight : height of blocks (cells). Default: 16. blockwidth : width of blocks (cells). Default: 16. canyonwidth : width of canyon (cells). Default: 16.","title":"Generate simple block geometry"},{"location":"udales-pre-processing/#run","text":"The write_inputs.sh shell script is a wrapper around the MATALB pre-processing functions of preprocessing.m . For more info about the functions see Developer's guide . The script requires several variables to be set up. Below is an example setup for copying and pasting. You can also specify these parameters in a config.sh file within the experiment directory, which is then read by the scripts. # We assume you are running the following commands from your # top-level project directory. export DA_TOOLSDIR = $( pwd ) /u-dales/tools # Directory of the scripts export DA_EXPDIR = $( pwd ) /experiments # The top-level directory of the simulation setups Then, to start the pre-processing, run: # We assume you are running the following commands from your # top-level project directory. # General syntax: write_inputs.sh exp_id ./u-dales/tools/write_inputs.sh 009 Replace 009 with the number of your simulation.","title":"Run"},{"location":"udales-pre-processing/#developers-guide","text":"The u-dales/tools/preprocessing.m matlab class contains the functionality for preprocessing. The constructor reads the parameters in namoptions and stores them as member variables, and defines default variables for those not specified. These are then used in the member functions. In these member functions, additional data structures are also stored as member variables, including those used repeatedly and those eventually written to files, so that one can easily view and manipulate them using the matlab IDE. The u-dales/tools/write_inputs.m matlab script calls member functions of preprocessing.m in order to write the necessary input files for uDALES. It is intended to be as short and readable as possible, with the goal being that a developer can edit for a particular purpose, perhaps by calling a member function they have added to preprocessing.m . It will work simply as a normal script using the matlab IDE, but when doing this, ensure that DA_EXPDIR = <top level directory>/experiments/ and DA_TOOLSDIR = <top level directory>/u-dales/tools/ are defined. The u-dales/tools/write_inputs.sh shell script acts as a wrapper around write_inputs.m . Before running the matlab script, it will run the shell script config.sh located in the experiment directory, which defines environmental variables DA_EXPDIR and DA_TOOLSDIR . After running the script, it will also write the correct number of blocks and facets to namoptions . It is intended to be run from the top level project directory. # We assume you are running the following commands from your # top-level project directory. # General syntax: write_inputs.sh exp_id ./u-dales/tools/write_inputs.sh 009","title":"Developer's guide"},{"location":"udales-pre-processing/#input-files","text":"uDALES requires a number of input files, all suffixed by the experiment number, which is omitted in the following documentation. The namoptions.inp file contains a list of parameters for uDALES and the pre-processing routines, and the pre-processing is intended to run using solely this file (with some exceptions). The input files are: xgrid.inp : list of x grid values zgrid.inp : list of z grid values. prof.inp : initial profiles of flow variables (described in DALES documentation). lscale.inp : large-scale forcings (described in DALES documentation). blocks.inp : block position and corresponding facets (described below). facets.inp : facet orientation and corresponding block (described below). Tfacinit.inp : list of initial facet temperatures. walltypes.inp : a description of the properties of different types of facet (described below). This is copied to the experiment directory automatically. If using scalars, scalar.inp is also required to specifiy the initial scalar profiles. When using the energy balance, the following additional files are required: facetarea.inp : list of the areas of facets. vf.nc.inp : view factors of facets (stored as a netcdf file). svf.inp : list of the sky view factors of facets. netsw.inp : list of net shortwave radiation on facets.","title":"Input files"},{"location":"udales-pre-processing/#structure-of-blocksinp","text":"Each row describes a block, with the first 6 columns giving the lower (l) and upper (u) limit in each direction (i,j,k), in the order: il, iu, jl, ju, kl, ku. The next 5 columns give the facets that make up the faces of the block, in the order: top, west, east, north, south. (Note east is assumed to be aligned with the i-direction).","title":"Structure of blocks.inp"},{"location":"udales-pre-processing/#structure-of-facetsinp","text":"Each row describes a facet, with columns giving the orientation, wall type id, block id, and building id.","title":"Structure of facets.inp"},{"location":"udales-pre-processing/#structure-of-walltypesinp","text":"Each row describes a wall type, with the first 6 columns being: wall type id, a boolean for whether it is a 'green' facet or not, momentum roughness length, heat roughness length, albedo, and emissivity. Assuming that each facet is composed of 3 layers, the next 3 columns give the thickness of each, the next 3 give the volumetric heat capacity, the next 3 give the heat conductivity, and the final 4 give the thermal diffusivity at each interface between the layers. For examples, please refer to the example simulations .","title":"Structure of walltypes.inp"},{"location":"udales-pre-processing/#visualising-geometries","text":"There are a number of functions in the preprocessing class that can be called from the Matlab editor in order to visualise the geometry. Assuming the instance of the preprocessing class is named r , plot_bl(r) plots the buildings, plot_blocks(r) plots the buildings and the roads, and plot_facets(r) plots all the facets.","title":"Visualising geometries"},{"location":"udales-pub-list/","text":"Publication list \u00b6 The uDALES software was used in the following publications : Evaluation of an operational air quality model using large-eddy simulation 1 . Steady-state large-eddy simulations of convective and stable urban boundary layers 2 . Drag distribution in idealized heterogeneous urban environments 3 . References \u00b6 Tom Grylls, Cl\u00e9mence M.A. Le Cornec, Pietro Salizzoni, Lionel Soulhac, Marc E.J. Stettler, and Maarten van Reeuwijk. Evaluation of an operational air quality model using large-eddy simulation. Atmospheric Environment: X , 3:100041, 2019. doi:10.1016/j.aeaoa.2019.100041 . \u21a9 Tom Grylls, Ivo Suter, and Maarten van Reeuwijk. Steady-state large-eddy simulations of convective and stable urban boundary layers. Boundary-Layer Meteorology , 175 3 3 :309\u2013341, April 2020. doi:10.1007/s10546-020-00508-x . \u21a9 Birgit S. S\u00fctzl, Gabriel G. Rooney, and Maarten van Reeuwijk. Drag distribution in idealized heterogeneous urban environments. Boundary-Layer Meteorology , October 2020. doi:10.1007/s10546-020-00567-0 . \u21a9","title":"Publication list"},{"location":"udales-pub-list/#publication-list","text":"The uDALES software was used in the following publications : Evaluation of an operational air quality model using large-eddy simulation 1 . Steady-state large-eddy simulations of convective and stable urban boundary layers 2 . Drag distribution in idealized heterogeneous urban environments 3 .","title":"Publication list"},{"location":"udales-pub-list/#references","text":"Tom Grylls, Cl\u00e9mence M.A. Le Cornec, Pietro Salizzoni, Lionel Soulhac, Marc E.J. Stettler, and Maarten van Reeuwijk. Evaluation of an operational air quality model using large-eddy simulation. Atmospheric Environment: X , 3:100041, 2019. doi:10.1016/j.aeaoa.2019.100041 . \u21a9 Tom Grylls, Ivo Suter, and Maarten van Reeuwijk. Steady-state large-eddy simulations of convective and stable urban boundary layers. Boundary-Layer Meteorology , 175 3 3 :309\u2013341, April 2020. doi:10.1007/s10546-020-00508-x . \u21a9 Birgit S. S\u00fctzl, Gabriel G. Rooney, and Maarten van Reeuwijk. Drag distribution in idealized heterogeneous urban environments. Boundary-Layer Meteorology , October 2020. doi:10.1007/s10546-020-00567-0 . \u21a9","title":"References"},{"location":"udales-simulation-setup/","text":"Simulation setup \u00b6 This document contains some notes on setting up uDALES simulations. A complete list of all parameters and switches is documented under Configuration . Table of contents \u00b6 Boundary Conditions Driver simulations Boundary Conditions \u00b6 The boundary conditions for uDALES are specified under the &BC header in namoptions.inp . Momentum \u00b6 Top \u00b6 Determined by BCtopm . Possible values: 1: free-slip, i.e. zero flux. 2: no-slip, i.e. zero velocity. 3: determined by inflow conditions. Bottom (below floor facets) \u00b6 These are de facto useless, as the bottom of the domain is covered by floor facets. Determined by BCbotm . Possible values: 1: free slip, i.e. zero flux. 2: flux given by wall function involving temperature. 3: flux given by neutral wall function. Walls \u00b6 Determined by iwallmom . Possible values: 1: free-slip, i.e. zero flux. 2: flux given by wall function involving temperature. 3: flux given by neutral wall function. x \u00b6 Determined by BCxm . Possible values: 1: periodic \u2154/4: inflow/outflow (write more on this) y \u00b6 Only possible value is 1: periodic. Temperature \u00b6 Only required when ltempeq = .true. Top \u00b6 Determined by BCtopT . Possible values: 1: constant flux given by wttop . 2: constant temperature given by thl_top . Bottom \u00b6 Determined by BCbotT . Possible values: 1: constant flux given by wtsurf . 2: flux given by wall function. Temperature of ghost cells below floor facets given by thls . Walls \u00b6 Determined by iwalltemp . Possible values: 1: constant flux given by bctfxm and bctfxp for x-walls, bctfym and bctfyp for y-walls, and bctfz for z-walls. (write more on this - what are x/y/z-walls) 2: flux given by wall function involving temperature. Moisture \u00b6 Scalars \u00b6 Driver simulations \u00b6 The options for running precursor and driven simulations are specified under the &DRIVER header in namoptions.xxx. This provides two model functionalities: 1) To run a precursor simulation where instantaneous y-z planes at a specified index in the x-direction ( iplane ) are written every dtdriver seconds to output files (named *driver*). 2) To run a driven simulation where the inlet y-z plane (at i=ib-1 and i=ib ) is determined by reading the *driver* files of a precursor simulation that has already been run. Running precursor simulations \u00b6 Precursor simulations are indicated by first setting idriver = 1 in namoptions.xxx. The set-up of the precursor simulation is then up to the users discretion. The other variables to specify are: tdriverstart - specifies the number of seconds after which the *driver* files will start being written. If the precursor simulation is not a warm start then it is recommended to allow a sufficient amount of time for the flow field to develop to the desired state before starting to write to the *driver* files. dtdriver specifies the timestep in seconds at which the y-z planes are written to the *driver* files. It is important to set this to be small (ideally dtdriver = dt ) in order to reduce the requirement to interpolate these fields in the resulting driven simulation. However, depending on the case, this can be made larger with the advantage being a reduction in size of the *driver* files that are produced. iplane is the index in the x-direction that you want to save the instantaneous y-z planes. For many cases the expected value is iplane = ie so that the outlet of the precursor simulation is saved. driverstore is the number of timesteps that the user wants to write to the *driver* files. The total simulation time should therefore be equal or greater to tdriverstart + (driverstore-1)*dtdriver seconds to ensure that the writing process completes. The driven simulation based off this precursor will be limited to a maximum run time of (driverstore-1)*dtdriver seconds (unless multiple precursors are run using warm starts). Outputs: A file for each prognostic variable (e.g. u0 , v0 , w0 , thl0 (if ltempeq = .true. ) etc.) for each processor.The file names follow ' var\"driver\\_\" var\"driver\\_\" nproc\".\"$expnr' where $var indicates the variable (NOTE: h is potential temperature under this convention). These files will hold the corresponding instantaneous y-z planes over the specified time period and are to be used to drive a driven simulation. Running driven simulations \u00b6 It is necessary to first have run a simulation following the above instructions. Driven simulations are initiated by setting idriver = 2 . The following are guidelines for setting up the driven simulation: The driven simulation must have the same jtot , ysize , kmax and zgrid.inp.xxx as its corresponding precursor simulation. The driven simulation must use the same number of cores as the precursor simulation. It is not necessary to apply a forcing to the driven simulation due to the enforced inlet-outlet boundary conditions. BCxm = 5 is the current index to enforce the required inlet-outlet boundary conditions. Boundary conditions in the x-direction for other prognostic variables will be overwritten by this and therefore do not need to be set. !! we could automate this at a later date if suitable !! . The *driver* files from the precursor simulation must be copied from its output directory to the experiments directory of the driven simulation. For example, if the precursor is 001 and the driven simulation is 002 and you are working from the top uDALES directory: cp outputs/001/*driver* experiments/002/ . driverstore must be equal to or less than the number of timesteps saved in the *driver* files (equivalent value of driverstore in the precursor simulation). driverjobnr must equal the job number of the corresponding precursor simulation. Following the above example: driverjobnr = 001 . runtime must equal (driverstore-1)*dtdriver seconds or less where dtdriver is from the precursor simulation. If this time limit is exceeded the simulation will be stopped as there will be no more data available to determine the inlet. NOTE: It is important that buildings are not positioned too close to the downwind edge of the domain. The vortices and wakes downwind in the nearfield of the buildings can cause errors alongside the convective outflow boundary condition. The necessary distance is case specific. If this distance is too small a typical error will be that high velocities are found at the domain edge and these lead to slow simulations and dt tending to nought.","title":"Set-up"},{"location":"udales-simulation-setup/#simulation-setup","text":"This document contains some notes on setting up uDALES simulations. A complete list of all parameters and switches is documented under Configuration .","title":"Simulation setup"},{"location":"udales-simulation-setup/#table-of-contents","text":"Boundary Conditions Driver simulations","title":"Table of contents"},{"location":"udales-simulation-setup/#boundary-conditions","text":"The boundary conditions for uDALES are specified under the &BC header in namoptions.inp .","title":"Boundary Conditions"},{"location":"udales-simulation-setup/#momentum","text":"","title":"Momentum"},{"location":"udales-simulation-setup/#top","text":"Determined by BCtopm . Possible values: 1: free-slip, i.e. zero flux. 2: no-slip, i.e. zero velocity. 3: determined by inflow conditions.","title":"Top"},{"location":"udales-simulation-setup/#bottom-below-floor-facets","text":"These are de facto useless, as the bottom of the domain is covered by floor facets. Determined by BCbotm . Possible values: 1: free slip, i.e. zero flux. 2: flux given by wall function involving temperature. 3: flux given by neutral wall function.","title":"Bottom (below floor facets)"},{"location":"udales-simulation-setup/#walls","text":"Determined by iwallmom . Possible values: 1: free-slip, i.e. zero flux. 2: flux given by wall function involving temperature. 3: flux given by neutral wall function.","title":"Walls"},{"location":"udales-simulation-setup/#x","text":"Determined by BCxm . Possible values: 1: periodic \u2154/4: inflow/outflow (write more on this)","title":"x"},{"location":"udales-simulation-setup/#y","text":"Only possible value is 1: periodic.","title":"y"},{"location":"udales-simulation-setup/#temperature","text":"Only required when ltempeq = .true.","title":"Temperature"},{"location":"udales-simulation-setup/#top_1","text":"Determined by BCtopT . Possible values: 1: constant flux given by wttop . 2: constant temperature given by thl_top .","title":"Top"},{"location":"udales-simulation-setup/#bottom","text":"Determined by BCbotT . Possible values: 1: constant flux given by wtsurf . 2: flux given by wall function. Temperature of ghost cells below floor facets given by thls .","title":"Bottom"},{"location":"udales-simulation-setup/#walls_1","text":"Determined by iwalltemp . Possible values: 1: constant flux given by bctfxm and bctfxp for x-walls, bctfym and bctfyp for y-walls, and bctfz for z-walls. (write more on this - what are x/y/z-walls) 2: flux given by wall function involving temperature.","title":"Walls"},{"location":"udales-simulation-setup/#moisture","text":"","title":"Moisture"},{"location":"udales-simulation-setup/#scalars","text":"","title":"Scalars"},{"location":"udales-simulation-setup/#driver-simulations","text":"The options for running precursor and driven simulations are specified under the &DRIVER header in namoptions.xxx. This provides two model functionalities: 1) To run a precursor simulation where instantaneous y-z planes at a specified index in the x-direction ( iplane ) are written every dtdriver seconds to output files (named *driver*). 2) To run a driven simulation where the inlet y-z plane (at i=ib-1 and i=ib ) is determined by reading the *driver* files of a precursor simulation that has already been run.","title":"Driver simulations"},{"location":"udales-simulation-setup/#running-precursor-simulations","text":"Precursor simulations are indicated by first setting idriver = 1 in namoptions.xxx. The set-up of the precursor simulation is then up to the users discretion. The other variables to specify are: tdriverstart - specifies the number of seconds after which the *driver* files will start being written. If the precursor simulation is not a warm start then it is recommended to allow a sufficient amount of time for the flow field to develop to the desired state before starting to write to the *driver* files. dtdriver specifies the timestep in seconds at which the y-z planes are written to the *driver* files. It is important to set this to be small (ideally dtdriver = dt ) in order to reduce the requirement to interpolate these fields in the resulting driven simulation. However, depending on the case, this can be made larger with the advantage being a reduction in size of the *driver* files that are produced. iplane is the index in the x-direction that you want to save the instantaneous y-z planes. For many cases the expected value is iplane = ie so that the outlet of the precursor simulation is saved. driverstore is the number of timesteps that the user wants to write to the *driver* files. The total simulation time should therefore be equal or greater to tdriverstart + (driverstore-1)*dtdriver seconds to ensure that the writing process completes. The driven simulation based off this precursor will be limited to a maximum run time of (driverstore-1)*dtdriver seconds (unless multiple precursors are run using warm starts). Outputs: A file for each prognostic variable (e.g. u0 , v0 , w0 , thl0 (if ltempeq = .true. ) etc.) for each processor.The file names follow ' var\"driver\\_\" var\"driver\\_\" nproc\".\"$expnr' where $var indicates the variable (NOTE: h is potential temperature under this convention). These files will hold the corresponding instantaneous y-z planes over the specified time period and are to be used to drive a driven simulation.","title":"Running precursor simulations"},{"location":"udales-simulation-setup/#running-driven-simulations","text":"It is necessary to first have run a simulation following the above instructions. Driven simulations are initiated by setting idriver = 2 . The following are guidelines for setting up the driven simulation: The driven simulation must have the same jtot , ysize , kmax and zgrid.inp.xxx as its corresponding precursor simulation. The driven simulation must use the same number of cores as the precursor simulation. It is not necessary to apply a forcing to the driven simulation due to the enforced inlet-outlet boundary conditions. BCxm = 5 is the current index to enforce the required inlet-outlet boundary conditions. Boundary conditions in the x-direction for other prognostic variables will be overwritten by this and therefore do not need to be set. !! we could automate this at a later date if suitable !! . The *driver* files from the precursor simulation must be copied from its output directory to the experiments directory of the driven simulation. For example, if the precursor is 001 and the driven simulation is 002 and you are working from the top uDALES directory: cp outputs/001/*driver* experiments/002/ . driverstore must be equal to or less than the number of timesteps saved in the *driver* files (equivalent value of driverstore in the precursor simulation). driverjobnr must equal the job number of the corresponding precursor simulation. Following the above example: driverjobnr = 001 . runtime must equal (driverstore-1)*dtdriver seconds or less where dtdriver is from the precursor simulation. If this time limit is exceeded the simulation will be stopped as there will be no more data available to determine the inlet. NOTE: It is important that buildings are not positioned too close to the downwind edge of the domain. The vortices and wakes downwind in the nearfield of the buildings can cause errors alongside the convective outflow boundary condition. The necessary distance is case specific. If this distance is too small a typical error will be that high velocities are found at the domain edge and these lead to slow simulations and dt tending to nought.","title":"Running driven simulations"}]}